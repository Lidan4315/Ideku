// <auto-generated />
using System;
using Ideku.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ideku.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824065501_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ideku.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CategoryName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Desc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Desc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("Id")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("DivisiId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("DivisiId")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NameDepartment");

                    b.HasKey("Id");

                    b.HasIndex("DivisiId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Division", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("Id")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("NameDivision")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NameDivision");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Employee", b =>
                {
                    b.Property<string>("EMP_ID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("EMP_ID");

                    b.Property<string>("DEPARTEMENT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(3)")
                        .HasColumnName("DEPARTEMENT");

                    b.Property<string>("DIVISION")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(3)")
                        .HasColumnName("DIVISION");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("EMP_STATUS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("EMP_STATUS");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("POSITION_LVL")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("POSITION_LVL");

                    b.Property<string>("POSITION_TITLE")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("POSITION_TITLE");

                    b.HasKey("EMP_ID");

                    b.HasIndex("DEPARTEMENT");

                    b.HasIndex("DIVISION");

                    b.ToTable("EMPLIST");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Desc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Desc");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EventName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Idea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AttachmentFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttachmentFiles");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedDate");

                    b.Property<int>("CurrentStage")
                        .HasColumnType("int")
                        .HasColumnName("CurrentStage");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CurrentStatus");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.Property<string>("IdeaCode")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("IdeaCode");

                    b.Property<string>("IdeaIssueBackground")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("IdeaIssueBackground");

                    b.Property<string>("IdeaName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("IdeaName");

                    b.Property<string>("IdeaSolution")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("IdeaSolution");

                    b.Property<long>("InitiatorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("InitiatorUserId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit")
                        .HasColumnName("IsRejected");

                    b.Property<int>("MaxStage")
                        .HasColumnType("int")
                        .HasColumnName("MaxStage");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("RejectedReason");

                    b.Property<decimal>("SavingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SavingCost");

                    b.Property<decimal?>("SavingCostVaidated")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SavingCostVaidated");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmittedDate");

                    b.Property<string>("ToDepartmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("ToDepartmentId");

                    b.Property<string>("ToDivisionId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("ToDivisionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int")
                        .HasColumnName("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId");

                    b.HasIndex("InitiatorUserId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Ideas_IsDeleted");

                    b.HasIndex("ToDepartmentId");

                    b.HasIndex("ToDivisionId");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("IX_Ideas_WorkflowId");

                    b.HasIndex("IsDeleted", "CurrentStatus")
                        .HasDatabaseName("IX_Ideas_IsDeleted_CurrentStatus");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Level");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Levels_IsActive");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Ideku.Models.Entities.LevelApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalLevel");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("IsPrimary");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelId");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LevelId")
                        .HasDatabaseName("IX_LevelApprovers_LevelId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_LevelApprovers_RoleId");

                    b.HasIndex("LevelId", "ApprovalLevel")
                        .HasDatabaseName("IX_LevelApprovers_LevelId_ApprovalLevel");

                    b.HasIndex("LevelId", "IsPrimary")
                        .HasDatabaseName("IX_LevelApprovers_LevelId_IsPrimary");

                    b.ToTable("LevelApprovers");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Milestone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatorUserId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<long>("IdeaId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdeaId");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("IdeaId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Desc");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ideku.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("EmployeeId");

                    b.Property<bool>("IsActing")
                        .HasColumnType("bit")
                        .HasColumnName("IsActing");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Desc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Desc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("WorkflowName");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Workflows_IsActive");

                    b.HasIndex("IsActive", "Priority")
                        .HasDatabaseName("IX_Workflows_IsActive_Priority");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConditionType");

                    b.Property<string>("ConditionValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ConditionValue");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Operator");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int")
                        .HasColumnName("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("IX_WorkflowConditions_WorkflowId");

                    b.HasIndex("ConditionType", "IsActive")
                        .HasDatabaseName("IX_WorkflowConditions_ConditionType_IsActive");

                    b.ToTable("WorkflowConditions");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Action");

                    b.Property<long>("ActorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("ActorUserId");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Comments");

                    b.Property<int>("FromStage")
                        .HasColumnType("int")
                        .HasColumnName("FromStage");

                    b.Property<long>("IdeaId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdeaId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp");

                    b.Property<int?>("ToStage")
                        .HasColumnType("int")
                        .HasColumnName("ToStage");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("IdeaId");

                    b.ToTable("WorkflowHistory");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("IsMandatory");

                    b.Property<bool>("IsParallel")
                        .HasColumnType("bit")
                        .HasColumnName("IsParallel");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelId");

                    b.Property<int>("Stage")
                        .HasColumnType("int")
                        .HasColumnName("Stage");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int")
                        .HasColumnName("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("LevelId")
                        .HasDatabaseName("IX_WorkflowStages_LevelId");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("IX_WorkflowStages_WorkflowId");

                    b.HasIndex("WorkflowId", "Stage")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkflowStages_WorkflowId_Stage");

                    b.ToTable("WorkflowStages");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Department", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Division", "Division")
                        .WithMany("Departments")
                        .HasForeignKey("DivisiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Employee", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Department", "DepartmentNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("DEPARTEMENT")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Division", "DivisionNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("DIVISION")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("DivisionNavigation");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Idea", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Category", "Category")
                        .WithMany("Ideas")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Event", "Event")
                        .WithMany("Ideas")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ideku.Models.Entities.User", "InitiatorUser")
                        .WithMany("InitiatedIdeas")
                        .HasForeignKey("InitiatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Department", "TargetDepartment")
                        .WithMany("TargetIdeas")
                        .HasForeignKey("ToDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Division", "TargetDivision")
                        .WithMany("TargetIdeas")
                        .HasForeignKey("ToDivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");

                    b.Navigation("InitiatorUser");

                    b.Navigation("TargetDepartment");

                    b.Navigation("TargetDivision");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ideku.Models.Entities.LevelApprover", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Level", "Level")
                        .WithMany("LevelApprovers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Milestone", b =>
                {
                    b.HasOne("Ideku.Models.Entities.User", "CreatorUser")
                        .WithMany("CreatedMilestones")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Idea", "Idea")
                        .WithMany("Milestones")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Ideku.Models.Entities.User", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("Ideku.Models.Entities.User", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowCondition", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowConditions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowHistory", b =>
                {
                    b.HasOne("Ideku.Models.Entities.User", "ActorUser")
                        .WithMany("WorkflowActions")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Idea", "Idea")
                        .WithMany("WorkflowHistories")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Ideku.Models.Entities.WorkflowStage", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Level", "Level")
                        .WithMany("WorkflowStages")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowStages")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Category", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("TargetIdeas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Division", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("TargetIdeas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Employee", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Event", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Idea", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("WorkflowHistories");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Level", b =>
                {
                    b.Navigation("LevelApprovers");

                    b.Navigation("WorkflowStages");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ideku.Models.Entities.User", b =>
                {
                    b.Navigation("CreatedMilestones");

                    b.Navigation("InitiatedIdeas");

                    b.Navigation("WorkflowActions");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Workflow", b =>
                {
                    b.Navigation("WorkflowConditions");

                    b.Navigation("WorkflowStages");
                });
#pragma warning restore 612, 618
        }
    }
}
