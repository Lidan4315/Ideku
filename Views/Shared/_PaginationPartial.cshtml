@model Ideku.ViewModels.Common.PagedResult<Ideku.Models.Entities.Idea>
@using Ideku.Helpers

@if (Model != null && Model.ShowPagination)
{
    var desktopVisiblePages = PaginationHelper.GetVisiblePages(Model.Page, Model.TotalPages, 5);
    
    var routeData = new Dictionary<string, string>();
    foreach (var kvp in Context.Request.Query)
    {
        if (!string.IsNullOrEmpty(kvp.Value) && 
            !kvp.Key.Equals("page", StringComparison.OrdinalIgnoreCase) &&
            !kvp.Key.Equals("pageSize", StringComparison.OrdinalIgnoreCase))
        {
            routeData[kvp.Key] = kvp.Value.ToString();
        }
    }
    routeData["pageSize"] = Model.PageSize.ToString();

    <div class="pagination-container-single-row">
        <div class="pagination-info">
            <i class="bi bi-info-circle text-primary me-1"></i>
            <span class="text-muted">
                Showing <strong>@Model.FirstItemIndex-@Model.LastItemIndex</strong> of <strong>@Model.TotalCount</strong> items
            </span>
        </div>
        
        <div class="pagination-controls">
            <div class="page-size-selector">
                <label class="form-label text-muted small mb-0 me-2">Items per page:</label>
                <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                    @foreach (var size in PaginationHelper.PageSizeOptions)
                    {
                        <option value="@size" selected="@(Model.PageSize == size)">@size</option>
                    }
                </select>
            </div>
            
            <nav aria-label="Page navigation" class="pagination-navigation">
                <ul class="pagination pagination-sm mb-0">
                    <!-- First Button (Desktop Only) -->
                    <li class="page-item first-last-btn @(Model.Page == 1 ? "disabled" : "")">
                        @if (Model.Page == 1)
                        {
                            <span class="page-link" title="First Page">
                                <i class="bi bi-chevron-double-left"></i>
                            </span>
                        }
                        else
                        {
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), 
                                new Dictionary<string, string>(routeData) { { "page", "1" } })" title="First Page">
                                <i class="bi bi-chevron-double-left"></i>
                            </a>
                        }
                    </li>
                    
                    <!-- Previous Button -->
                    <li class="page-item @(Model.HasPrevious ? "" : "disabled")">
                        @if (Model.HasPrevious)
                        {
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), 
                                new Dictionary<string, string>(routeData) { { "page", (Model.Page - 1).ToString() } })" title="Previous">
                                <i class="bi bi-chevron-left"></i>
                            </a>
                        }
                        else
                        {
                            <span class="page-link" title="Previous">
                                <i class="bi bi-chevron-left"></i>
                            </span>
                        }
                    </li>

                    <!-- Page Numbers (Responsive) -->
                    @foreach (var pageNumber in desktopVisiblePages)
                    {
                        <li class="page-item page-number desktop-page @(pageNumber == Model.Page ? "active" : "")">
                            @if (pageNumber == Model.Page)
                            {
                                <span class="page-link current-page" aria-current="page">@pageNumber</span>
                            }
                            else
                            {
                                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), 
                                    new Dictionary<string, string>(routeData) { { "page", pageNumber.ToString() } })" 
                                    title="Go to page @pageNumber">@pageNumber</a>
                            }
                        </li>
                    }
                    
                    <!-- Mobile: Only show current page number -->
                    <li class="page-item page-number mobile-page">
                        <span class="page-link" style="background-color: white; border-color: #dee2e6; color: #495057;" aria-current="page">@Model.Page</span>
                    </li>
                    
                    <!-- Next Button -->
                    <li class="page-item @(Model.HasNext ? "" : "disabled")">
                        @if (Model.HasNext)
                        {
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), 
                                new Dictionary<string, string>(routeData) { { "page", (Model.Page + 1).ToString() } })" title="Next">
                                <i class="bi bi-chevron-right"></i>
                            </a>
                        }
                        else
                        {
                            <span class="page-link" title="Next">
                                <i class="bi bi-chevron-right"></i>
                            </span>
                        }
                    </li>
                    
                    <!-- Last Button (Desktop Only) -->
                    <li class="page-item first-last-btn @(Model.Page == Model.TotalPages ? "disabled" : "")">
                        @if (Model.Page == Model.TotalPages)
                        {
                            <span class="page-link" title="Last Page">
                                <i class="bi bi-chevron-double-right"></i>
                            </span>
                        }
                        else
                        {
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), 
                                new Dictionary<string, string>(routeData) { { "page", Model.TotalPages.ToString() } })" title="Last Page">
                                <i class="bi bi-chevron-double-right"></i>
                            </a>
                        }
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <!-- JavaScript for page size change -->
    <script>
        function changePageSize(newPageSize) {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('pageSize', newPageSize);
            currentUrl.searchParams.set('page', '1'); // Reset to page 1 when changing page size
            window.location.href = currentUrl.toString();
        }
    </script>
}

<style>
    .pagination-container-single-row {
        padding: 1rem 0;
        margin-top: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .pagination-info {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

    .pagination-controls {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        flex-shrink: 0;
    }

    .page-size-selector {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
        white-space: nowrap;
    }

    .pagination-navigation {
        display: flex;
        align-items: center;
    }

    .pagination .page-link {
        border-radius: 8px;
        margin: 0 3px;
        padding: 0.5rem 0.75rem;
        color: #495057;
        border: 1px solid #dee2e6;
        transition: all 0.15s ease-in-out;
        background-color: white;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    .pagination .page-link:hover {
        background-color: #f8f9fa;
        border-color: #0d6efd;
        color: #0d6efd;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(13, 110, 253, 0.15);
    }

    .pagination .page-item.active .page-link,
    .pagination .page-link.current-page {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
        box-shadow: 0 3px 8px rgba(13, 110, 253, 0.4);
        font-weight: 600;
        transform: translateY(-1px);
    }

    .pagination .page-item.disabled .page-link {
        color: #adb5bd;
        background-color: #f8f9fa;
        border-color: #e9ecef;
        cursor: not-allowed;
        box-shadow: none;
        opacity: 0.6;
    }

    .pagination .page-item.disabled .page-link:hover {
        transform: none;
        background-color: #f8f9fa;
        border-color: #e9ecef;
        color: #adb5bd;
        box-shadow: none;
    }

    /* Responsive Rules */
    .mobile-page {
        display: none;
    }
    
    @@media (max-width: 949.98px) {
        /* Mobile Layout */
        .pagination-container-single-row {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
            padding: 0.75rem 0;
        }
        
        .pagination-controls {
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }
        
        .pagination-info, .page-size-selector {
            justify-content: center;
            text-align: center;
        }
        
        .pagination-info {
            font-size: 0.85rem;
        }
        
        /* Mobile Pagination Buttons */
        .pagination .page-link {
            padding: 0.75rem 1rem;
            font-size: 1rem;
            min-width: 44px;
            min-height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 2px;
            font-weight: 500;
        }
        
        /* Hide desktop elements */
        .first-last-btn {
            display: none !important;
        }
        
        .desktop-page {
            display: none !important;
        }
        
        /* Show mobile elements */
        .mobile-page {
            display: flex !important;
        }
        
        /* Mobile prev/next buttons - same style as desktop */
        .pagination .page-item:has(.bi-chevron-left) .page-link,
        .pagination .page-item:has(.bi-chevron-right) .page-link {
            background-color: white;
            border-color: #dee2e6;
            color: #495057;
            font-weight: 500;
        }
        
        .pagination .page-item:has(.bi-chevron-left):hover .page-link,
        .pagination .page-item:has(.bi-chevron-right):hover .page-link {
            background-color: #f8f9fa;
            border-color: #0d6efd;
            color: #0d6efd;
        }
        
        .page-size-selector select {
            padding: 0.6rem 2.5rem 0.6rem 1rem;
            font-size: 0.95rem;
        }
    }
    
    @@media (max-width: 479.98px) {
        /* Extra Small Screens */
        .pagination .page-link {
            padding: 0.65rem 0.85rem;
            font-size: 0.95rem;
            min-width: 42px;
            min-height: 42px;
        }
        
        .pagination-info {
            font-size: 0.8rem;
        }
        
        .page-size-selector {
            font-size: 0.85rem;
        }
        
        .page-size-selector select {
            padding: 0.5rem 2rem 0.5rem 0.8rem;
            font-size: 0.9rem;
        }
    }
</style>