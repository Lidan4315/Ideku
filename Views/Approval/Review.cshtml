@model Ideku.ViewModels.Approval.ApprovalReviewViewModel

@{
    ViewData["Title"] = "Idea Review";
}

<div class="container-fluid">
    <div class="page-header mb-4 d-flex justify-content-between align-items-center">
        <div>
            <h2 class="page-title text-gradient">
                <i class="bi bi-file-earmark-text me-2"></i>Review Idea
            </h2>
            <p class="text-muted mb-0">Review the details of the idea and make an approval decision.</p>
        </div>
        <div>
            <a href="@Url.Action("Index", "Approval")" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-2"></i>Back to List
            </a>
        </div>
    </div>

    <!-- Idea Details Section -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">@Model.Idea.IdeaName</h6>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Idea ID</label>
                        <p>@Model.Idea.IdeaCode</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Current Status</label>
                        <p><span class="badge bg-warning text-dark">@Model.Idea.CurrentStatus</span></p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Submitted by</label>
                        <p>@Model.Idea.InitiatorUser.Name (@Model.Idea.InitiatorUser.EmployeeId)</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Submitted Date</label>
                        <p>@Model.Idea.SubmittedDate.ToString("dd MMMM yyyy HH:mm")</p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Division</label>
                        <p>@Model.Idea.TargetDivision.NameDivision</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Department</label>
                        <p>@Model.Idea.TargetDepartment.NameDepartment</p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Category</label>
                        <p>@Model.Idea.Category.CategoryName</p>
                    </div>
                </div>
                @if (Model.Idea.Event != null)
                {
                    <div class="col-md-6">
                        <div class="form-group-view">
                            <label>Event</label>
                            <p>@Model.Idea.Event.EventName</p>
                        </div>
                    </div>
                }
            </div>
            <div class="form-group-view mb-3">
                <label>Problem/Issue Background</label>
                <div class="form-control-plaintext">@Model.Idea.IdeaIssueBackground</div>
            </div>
            <div class="form-group-view mb-3">
                <label>Proposed Solution</label>
                <div class="form-control-plaintext">@Model.Idea.IdeaSolution</div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Financial Impact</label>
                        <p>@Model.Idea.SavingCost.ToString("C")</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Attachments</label>
                        <p><a href="/uploads/@Model.Idea.AttachmentFiles" target="_blank">@Model.Idea.AttachmentFiles</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Validation Decision Section -->
    @if (ViewBag.CanTakeAction == true)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Validation Decision</h6>
            </div>
            <div class="card-body">
                <form asp-action="Approve" asp-route-id="@Model.Idea.Id" method="post">
                    @Html.AntiForgeryToken()
                    <div class="approve-section mb-4">
                        <h5><i class="fas fa-check-circle text-success"></i> Approve Idea</h5>
                        <div class="form-group mb-3">
                            <label asp-for="ValidatedSavingCost" class="form-label">
                                Validated Saving Cost (USD) <span class="text-danger">*</span>
                            </label>
                            <input asp-for="ValidatedSavingCost" class="form-control" 
                                   type="number" step="0.01" min="0" 
                                   placeholder="Enter validated cost savings amount in USD" />
                            <span asp-validation-for="ValidatedSavingCost" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="ApprovalComments" class="form-label">
                                Approval Comments <span class="text-danger">*</span>
                            </label>
                            <textarea asp-for="ApprovalComments" class="form-control" rows="3" 
                                      placeholder="Please provide detailed approval comments"></textarea>
                            <span asp-validation-for="ApprovalComments" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-success" id="approveBtn"><i class="fas fa-check"></i> Approve Idea</button>
                    </div>
                </form>
                <hr />
                <form asp-action="Reject" asp-route-id="@Model.Idea.Id" method="post">
                    @Html.AntiForgeryToken()
                    <div class="reject-section">
                        <h5><i class="fas fa-times-circle text-danger"></i> Reject Idea</h5>
                        <div class="form-group mb-3">
                            <label asp-for="RejectionReason" class="form-label">
                                Rejection Reason <span class="text-danger">*</span>
                            </label>
                            <textarea asp-for="RejectionReason" class="form-control" rows="3" placeholder="Please provide a clear reason for rejection"></textarea>
                            <span asp-validation-for="RejectionReason" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-danger" id="rejectBtn"><i class="fas fa-times"></i> Reject Idea</button>
                    </div>
                </form>
            </div>
        </div>
    }
    else
    {
        <!-- Approval Timeline -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="bi bi-clock-history me-2"></i>Approval Timeline
                </h6>
            </div>
            <div class="card-body">
                <!-- Current Stage -->
                <div class="timeline-item mb-4">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="timeline-icon bg-primary">
                                    <i class="bi bi-hourglass-split text-white"></i>
                                </div>
                                <small class="text-muted d-block mt-2">
                                    <strong>Stage</strong>
                                </small>
                            </div>
                        </div>
                        <div class="col-md-9">
                            <div class="timeline-content">
                                <h6 class="mb-2">
                                    <span class="badge bg-primary me-2">Stage S@(Model.Idea.CurrentStage)</span>
                                    <strong>In Progress</strong>
                                </h6>
                                <div class="alert alert-info mb-0" role="alert">
                                    <i class="bi bi-eye me-2"></i>
                                    <strong>Read-Only Access:</strong> This idea is no longer in your approval stage.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Latest History -->
                @if (ViewBag.WorkflowHistory != null)
                {
                    var workflowHistory = ViewBag.WorkflowHistory as IEnumerable<Ideku.Models.Entities.WorkflowHistory>;
                    if (workflowHistory != null && workflowHistory.Any())
                    {
                        var latestHistory = workflowHistory.First(); // Get only the most recent entry
                        <div class="timeline-item mb-4">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center">
                                        @if (latestHistory.Action == "Approved")
                                        {
                                            <div class="timeline-icon bg-success">
                                                <i class="bi bi-check-circle text-white"></i>
                                            </div>
                                        }
                                        else if (latestHistory.Action == "Rejected")
                                        {
                                            <div class="timeline-icon bg-danger">
                                                <i class="bi bi-x-circle text-white"></i>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="timeline-icon bg-info">
                                                <i class="bi bi-info-circle text-white"></i>
                                            </div>
                                        }
                                        <small class="text-muted d-block mt-2">
                                            @latestHistory.Timestamp.ToString("MMM dd, yyyy")<br>
                                            @latestHistory.Timestamp.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    <div class="timeline-content">
                                        <h6 class="mb-2">
                                            <span class="badge bg-secondary me-2">Stage @latestHistory.FromStage → @(latestHistory.ToStage?.ToString() ?? "End")</span>
                                            <strong>@latestHistory.Action</strong>
                                        </h6>
                                        <p class="mb-2">
                                            <i class="bi bi-person-circle me-1"></i>
                                            <strong>By:</strong> @(latestHistory.ActorUser?.Name ?? "System")
                                        </p>
                                        @if (!string.IsNullOrEmpty(latestHistory.Comments))
                                        {
                                            <div class="bg-light p-3 rounded mb-2">
                                                <small class="text-muted">Comments:</small>
                                                <p class="mb-0">@latestHistory.Comments</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-clock me-2"></i>
                            <em>No approval history available yet.</em>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<style>
    .page-header {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 2rem;
        border-radius: 1rem;
        border: 1px solid #e5e7eb;
    }
    
    .page-title {
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .card {
        border: none;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-radius: 1rem;
    }
    
    .text-gradient {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .form-group-view {
        margin-bottom: 1rem;
    }

    .form-group-view label {
        display: block;
        font-weight: 600;
        color: #6b7280;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .form-group-view p,
    .form-group-view .form-control-plaintext {
        background-color: #f8fafc;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        margin: 0;
        font-size: 1rem;
        color: #1f2937;
    }
    
    .form-control-plaintext {
        white-space: pre-wrap;
        min-height: 100px;
    }

    /* Timeline Styles */
    .timeline {
        position: relative;
    }

    .timeline-item {
        position: relative;
        padding-left: 0;
    }

    .timeline-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-content {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        border-left: 4px solid #007bff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .timeline-item:not(:last-child)::after {
        content: '';
        position: absolute;
        left: 50%;
        top: 50px;
        transform: translateX(-50%);
        width: 2px;
        height: calc(100% - 50px);
        background: linear-gradient(to bottom, #dee2e6, transparent);
        z-index: -1;
    }

    @@media (max-width: 768px) {
        .timeline-item::after {
            display: none;
        }
        
        .timeline-content {
            margin-top: 1rem;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle Approve form
        const approveForm = document.querySelector('form[action*="Approve"]');
        if (approveForm) {
            approveForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Client-side validation
                const validatedSavingCost = document.querySelector('input[name="ValidatedSavingCost"]').value;
                const approvalComments = document.querySelector('textarea[name="ApprovalComments"]').value;
                
                if (!validatedSavingCost.trim()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Validated saving cost is required'
                    });
                    return;
                }
                
                if (parseFloat(validatedSavingCost) < 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Validated saving cost must be a positive number'
                    });
                    return;
                }
                
                if (!approvalComments.trim()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Approval comments are required'
                    });
                    return;
                }
                
                Swal.fire({
                    title: 'Confirm Approval',
                    text: 'Are you sure you want to approve this idea?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, Approve!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        const approveBtn = document.getElementById('approveBtn');
                        const originalBtnContent = approveBtn.innerHTML;
                        approveBtn.disabled = true;
                        approveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
                        
                        // Submit form by creating a new form submission
                        const formData = new FormData(approveForm);
                        fetch(approveForm.action, {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            // Reset button state
                            approveBtn.disabled = false;
                            approveBtn.innerHTML = originalBtnContent;
                            
                            if (response.redirected) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Idea has been approved successfully!',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = response.url;
                                });
                            }
                        }).catch(error => {
                            // Reset button state on error
                            approveBtn.disabled = false;
                            approveBtn.innerHTML = originalBtnContent;
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'An error occurred while processing approval.'
                            });
                        });
                    }
                });
            });
        }
        
        // Handle Reject form
        const rejectForm = document.querySelector('form[action*="Reject"]');
        if (rejectForm) {
            rejectForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const rejectionReason = document.querySelector('textarea[name="RejectionReason"]').value;
                if (!rejectionReason.trim()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Rejection reason is required'
                    });
                    return;
                }
                
                Swal.fire({
                    title: 'Confirm Rejection',
                    text: 'Are you sure you want to reject this idea?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, Reject!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        const rejectBtn = document.getElementById('rejectBtn');
                        const originalBtnContent = rejectBtn.innerHTML;
                        rejectBtn.disabled = true;
                        rejectBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
                        
                        // Submit form by creating a new form submission
                        const formData = new FormData(rejectForm);
                        fetch(rejectForm.action, {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            // Reset button state
                            rejectBtn.disabled = false;
                            rejectBtn.innerHTML = originalBtnContent;
                            
                            if (response.redirected) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Idea has been rejected successfully!',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = response.url;
                                });
                            }
                        }).catch(error => {
                            // Reset button state on error
                            rejectBtn.disabled = false;
                            rejectBtn.innerHTML = originalBtnContent;
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'An error occurred while processing rejection.'
                            });
                        });
                    }
                });
            });
        }
    });
</script>
