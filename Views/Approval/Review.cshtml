@model Ideku.ViewModels.Approval.ApprovalReviewViewModel

@{
    ViewData["Title"] = "Idea Review";
}

<div class="container-fluid">
    <div class="page-header mb-4 d-flex justify-content-between align-items-center">
        <div>
            <h2 class="page-title text-gradient">
                <i class="bi bi-file-earmark-text me-2"></i>Review Idea
            </h2>
            <p class="text-muted mb-0">Review the details of the idea and make an approval decision.</p>
        </div>
        <div>
            <a href="@Url.Action("Index", "Approval")" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-2"></i>Back to List
            </a>
        </div>
    </div>

    <!-- Idea Details Section -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">@Model.Idea.IdeaName</h6>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Idea ID</label>
                        <p>@Model.Idea.IdeaCode</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Current Status</label>
                        <p><span class="badge bg-warning text-dark">@Model.Idea.CurrentStatus</span></p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Submitted by</label>
                        <p>@Model.Idea.InitiatorUser.Name (@Model.Idea.InitiatorUser.EmployeeId)</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Submitted Date</label>
                        <p>@Model.Idea.SubmittedDate.ToString("dd MMMM yyyy HH:mm")</p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Division</label>
                        <p>@Model.Idea.TargetDivision.NameDivision</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Department</label>
                        <p>@Model.Idea.TargetDepartment.NameDepartment</p>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Category</label>
                        <p>@Model.Idea.Category.CategoryName</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group-view">
                        <label>Event</label>
                        <p>@(Model.Idea.Event?.EventName ?? "-")</p>
                    </div>
                </div>
            </div>
            <div class="form-group-view mb-3">
                <label>Idea Description</label>
                <div class="form-control-plaintext">@Model.Idea.IdeaIssueBackground</div>
            </div>
            <div class="form-group-view mb-3">
                <label>Idea Solution</label>
                <div class="form-control-plaintext">@Model.Idea.IdeaSolution</div>
            </div>
            <div class="form-group-view mb-3">
                <label>Saving Cost (USD)</label>
                <p>@Model.Idea.SavingCost.ToString("C0")</p>
            </div>
            <div class="form-group-view mb-3">
                <label>Attachments</label>
                @if (!string.IsNullOrEmpty(Model.Idea.AttachmentFiles))
                {
                    @foreach (var file in Model.Idea.AttachmentFiles.Split(';', StringSplitOptions.RemoveEmptyEntries))
                    {
                        var filename = System.IO.Path.GetFileName(file);
                        var viewUrl = Url.Action("ViewAttachment", new { filename = filename, ideaId = Model.Idea.Id });
                        var downloadUrl = Url.Action("DownloadAttachment", new { filename = filename, ideaId = Model.Idea.Id });

                        <div class="attachment-item d-flex justify-content-between align-items-center mb-2">
                            <span class="filename text-truncate me-2" title="@filename">
                                <i class="bi bi-paperclip me-1"></i>@filename
                            </span>
                            <div class="attachment-actions">
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary view-attachment-btn" 
                                        data-filename="@filename"
                                        data-view-url="@viewUrl"
                                        data-download-url="@downloadUrl"
                                        title="View @filename">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <a href="@downloadUrl" 
                                   class="btn btn-sm btn-outline-secondary ms-1"
                                   title="Download @filename">
                                    <i class="bi bi-download"></i>
                                </a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No attachments</p>
                }
            </div>
        </div>
    </div>

    <!-- Validation Decision Section -->
    @if (ViewBag.CanTakeAction == true)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Validation Decision</h6>
            </div>
            <div class="card-body">
                <form asp-action="Approve" asp-route-id="@Model.Idea.Id" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="approve-section mb-4">
                        <h5><i class="fas fa-check-circle text-success"></i> Approve Idea</h5>
                        
                        <div class="form-group mb-3">
                            <label asp-for="ValidatedSavingCost" class="form-label">
                                Validated Saving Cost (USD) <span class="text-danger">*</span>
                            </label>
                            
                            <!-- Display field dengan comma formatting -->
                            <input type="text" class="form-control" id="validatedCostDisplay" 
                                   placeholder="Enter validated saving cost" />
                            
                            <!-- Hidden field untuk form submission -->
                            <input type="hidden" asp-for="ValidatedSavingCost" id="validatedCostHidden" />
                                   
                            <small class="form-text text-muted mt-1">
                                <i class="bi bi-check-circle me-1"></i>
                                Enter the validated saving cost amount
                            </small>
                            
                            <span asp-validation-for="ValidatedSavingCost" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="ApprovalComments" class="form-label">
                                Approval Comments <span class="text-danger">*</span>
                            </label>
                            <textarea asp-for="ApprovalComments" class="form-control" rows="3" 
                                      placeholder="Please provide detailed approval comments"></textarea>
                            <span asp-validation-for="ApprovalComments" class="text-danger"></span>
                        </div>

                        <!-- Additional Files Section -->
                        <div class="form-group mb-3">
                            <label class="form-label">
                                <i class="bi bi-paperclip me-1"></i>Attachments File
                                @if (Model.IsFileRequired)
                                {
                                    <span class="text-danger">*</span>
                                    <small class="text-danger">(Required - Initiator did not upload files)</small>
                                }
                                else
                                {
                                    <small class="text-muted">(Optional)</small>
                                }
                            </label>
                            
                            <div class="additional-files-container">
                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                    <input type="file" id="approvalFileInput" class="d-none" accept=".pdf,.doc,.docx,.xlsx,.jpg,.jpeg,.png" />
                                    <button type="button" class="btn add-file-btn" onclick="document.getElementById('approvalFileInput').click()">
                                        <i class="bi bi-plus-circle me-2"></i>Add File
                                    </button>
                                </div>
                                <small class="form-text text-muted d-block mt-1">Add files one by one. Accepted: PDF, DOC, DOCX, XLSX, JPG, PNG</small>
                                
                                <!-- Selected Files List -->
                                <div id="approvalFilesList">
                                    <div class="text-muted text-center" id="noApprovalFilesMessage" style="display: none;">
                                    </div>
                                </div>
                                
                                <!-- Hidden inputs for files -->
                                <div id="hiddenApprovalFileInputs"></div>
                            </div>
                            
                            <span asp-validation-for="ApprovalFiles" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label class="form-label">
                                <i class="bi bi-building me-1"></i>Related Divisions
                                <small class="text-muted">(Optional - Select divisions whose Workstream Leaders should be notified)</small>
                            </label>
                            
                            <!-- Hidden input to store selected division IDs -->
                            <input asp-for="SelectedRelatedDivisions" type="hidden" id="selectedDivisionsInput" />
                            
                            <!-- Button + Tags Interface -->
                            <div class="related-divisions-container">
                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                    <!-- Add Division Button -->
                                    <div class="dropdown position-relative">
                                        <button type="button" class="btn dropdown-toggle add-division-btn" 
                                                id="addDivisionBtn" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-building-add me-2"></i>Select Division
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="addDivisionBtn" id="divisionsDropdown">
                                            @foreach (var division in Model.AvailableDivisions)
                                            {
                                                <li>
                                                    <a class="dropdown-item division-option" href="#" 
                                                       data-division-id="@division.Value" 
                                                       data-division-name="@division.Text">
                                                        @division.Text
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                    
                                    <!-- Selected Divisions Tags -->
                                    <div id="selectedDivisionsTags" class="d-flex flex-wrap gap-2">
                                        <!-- Tags will be dynamically added here -->
                                    </div>
                                </div>
                                
                                <!-- Info message -->
                                <div id="divisionsInfo" class="related-divisions-info d-none">
                                    <small class="text-muted">
                                        <i class="bi bi-info-circle me-1"></i>
                                        <strong><span id="selectedCount">0</span> division(s)</strong> selected. 
                                        Workstream Leaders from selected divisions will receive email notifications.
                                    </small>
                                </div>
                            </div>
                            
                            <span asp-validation-for="SelectedRelatedDivisions" class="text-danger"></span>
                        </div>

                        <button type="submit" class="btn btn-success" id="approveBtn"><i class="fas fa-check"></i> Approve Idea</button>
                    </div>
                </form>
                <hr />
                <form asp-action="Reject" asp-route-id="@Model.Idea.Id" method="post">
                    @Html.AntiForgeryToken()
                    <div class="reject-section">
                        <h5><i class="fas fa-times-circle text-danger"></i> Reject Idea</h5>
                        <div class="form-group mb-3">
                            <label asp-for="RejectionReason" class="form-label">
                                Rejection Reason <span class="text-danger">*</span>
                            </label>
                            <textarea asp-for="RejectionReason" class="form-control" rows="3" placeholder="Please provide a clear reason for rejection"></textarea>
                            <span asp-validation-for="RejectionReason" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-danger" id="rejectBtn"><i class="fas fa-times"></i> Reject Idea</button>
                    </div>
                </form>
            </div>
        </div>
    }
    else
    {
        <!-- Approval Timeline -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="bi bi-clock-history me-2"></i>Approval Timeline
                </h6>
            </div>
            <div class="card-body">
                <!-- Current Stage -->
                <div class="timeline-item mb-4">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="timeline-icon bg-primary">
                                    <i class="bi bi-hourglass-split text-white"></i>
                                </div>
                                <small class="text-muted d-block mt-2">
                                    <strong>Stage</strong>
                                </small>
                            </div>
                        </div>
                        <div class="col-md-9">
                            <div class="timeline-content">
                                <h6 class="mb-2">
                                    <span class="badge bg-primary me-2">Stage S@(Model.Idea.CurrentStage)</span>
                                    <strong>In Progress</strong>
                                </h6>
                                <div class="alert alert-info mb-0" role="alert">
                                    <i class="bi bi-eye me-2"></i>
                                    <strong>Read-Only Access:</strong> This idea is no longer in your approval stage.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Latest History -->
                @if (ViewBag.WorkflowHistory != null)
                {
                    var workflowHistory = ViewBag.WorkflowHistory as IEnumerable<Ideku.Models.Entities.WorkflowHistory>;
                    if (workflowHistory != null && workflowHistory.Any())
                    {
                        var latestHistory = workflowHistory.First(); // Get only the most recent entry
                        <div class="timeline-item mb-4">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center">
                                        @if (latestHistory.Action == "Approved")
                                        {
                                            <div class="timeline-icon bg-success">
                                                <i class="bi bi-check-circle text-white"></i>
                                            </div>
                                        }
                                        else if (latestHistory.Action == "Rejected")
                                        {
                                            <div class="timeline-icon bg-danger">
                                                <i class="bi bi-x-circle text-white"></i>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="timeline-icon bg-info">
                                                <i class="bi bi-info-circle text-white"></i>
                                            </div>
                                        }
                                        <small class="text-muted d-block mt-2">
                                            @latestHistory.Timestamp.ToString("MMM dd, yyyy")<br>
                                            @latestHistory.Timestamp.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    <div class="timeline-content">
                                        <h6 class="mb-2">
                                            <span class="badge bg-secondary me-2">Stage @latestHistory.FromStage → @(latestHistory.ToStage?.ToString() ?? "End")</span>
                                            <strong>@latestHistory.Action</strong>
                                        </h6>
                                        <p class="mb-2">
                                            <i class="bi bi-person-circle me-1"></i>
                                            <strong>By:</strong> @(latestHistory.ActorUser?.Name ?? "System")
                                        </p>
                                        @if (!string.IsNullOrEmpty(latestHistory.Comments))
                                        {
                                            <div class="bg-light p-3 rounded mb-2">
                                                <small class="text-muted">Comments:</small>
                                                <p class="mb-0">@latestHistory.Comments</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-clock me-2"></i>
                            <em>No approval history available yet.</em>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<!-- File Preview Modal -->
<div class="modal fade" id="attachmentModal" tabindex="-1" aria-labelledby="attachmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attachmentModalLabel">
                    <i class="bi bi-file-earmark me-2"></i>File Preview
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0" id="attachment-preview">
                <!-- Dynamic content will be loaded here -->
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading file preview...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Close
                </button>
                <a href="#" id="modalDownloadBtn" class="btn btn-primary" style="display: none;">
                    <i class="bi bi-download me-1"></i>Download File
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    .page-header {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 2rem;
        border-radius: 1rem;
        border: 1px solid #e5e7eb;
    }
    
    .page-title {
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .card {
        border: none;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-radius: 1rem;
    }
    
    .text-gradient {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .form-group-view {
        margin-bottom: 1rem;
    }

    .form-group-view label {
        display: block;
        font-weight: 600;
        color: #6b7280;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .form-group-view p,
    .form-group-view .form-control-plaintext {
        background-color: #f8fafc;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        margin: 0;
        font-size: 1rem;
        color: #1f2937;
    }
    
    .form-control-plaintext {
        white-space: pre-wrap;
        min-height: 100px;
    }

    /* Timeline Styles */
    .timeline {
        position: relative;
    }

    .timeline-item {
        position: relative;
        padding-left: 0;
    }

    .timeline-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-content {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        border-left: 4px solid #007bff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .timeline-item:not(:last-child)::after {
        content: '';
        position: absolute;
        left: 50%;
        top: 50px;
        transform: translateX(-50%);
        width: 2px;
        height: calc(100% - 50px);
        background: linear-gradient(to bottom, #dee2e6, transparent);
        z-index: -1;
    }

    @@media (max-width: 768px) {
        .timeline-item::after {
            display: none;
        }
        
        .timeline-content {
            margin-top: 1rem;
        }
    }

    /* Attachment Styles */
    .attachment-item {
        background-color: #f8fafc;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        margin: 0;
        font-size: 1rem;
        color: #1f2937;
    }


    .filename {
        font-size: 0.9rem;
        color: #495057;
        font-weight: 500;
        max-width: 200px;
    }

    .attachment-actions .btn {
        width: 36px;
        height: 36px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        border-radius: 8px;
        font-size: 0.9rem;
    }

    .attachment-actions .btn:hover {
        transform: scale(1.05);
        border-color: #007bff;
        color: #007bff;
        background-color: #f8f9fa;
    }

    /* Modal Styles */
    .modal-xl {
        max-width: 70vw;
    }

    #attachment-preview img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
    }

    #attachment-preview iframe {
        width: 100%;
        height: 70vh;
        border: none;
    }

    .file-preview-error {
        text-align: center;
        padding: 3rem;
        color: #6c757d;
    }

    .file-preview-error i {
        font-size: 4rem;
        margin-bottom: 1rem;
        color: #dc3545;
    }

    @@media (max-width: 768px) {
        .modal-xl {
            max-width: 95vw;
            margin: 0.5rem;
        }
        
        .modal-dialog {
            margin: 0.5rem;
        }
        
        .modal-content {
            border-radius: 0.5rem;
        }
        
        #attachment-preview iframe {
            width: 100% !important;
            height: 60vh !important;
            min-height: 350px !important;
        }
        
        #attachment-preview img {
            max-width: 100% !important;
            height: auto !important;
            max-height: 60vh !important;
        }
        
        .attachment-item {
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .attachment-actions {
            align-self: flex-end;
        }
        
        .filename {
            max-width: 100%;
        }
    }

    /* Related Divisions Button + Tags Styles */
    .related-divisions-container {
        border: 1px solid #e5e7eb;
        border-radius: 0.75rem;
        padding: 1.25rem;
        background-color: transparent;
    }
    
    /* Additional Files Container - Same style as Related Divisions */
    .additional-files-container {
        border: 1px solid #e5e7eb;
        border-radius: 0.75rem;
        padding: 1.25rem;
        background-color: transparent;
    }
    
    .add-division-btn {
        border: 1px solid #6b7280;
        background-color: #ffffff;
        color: #374151;
        font-weight: 500;
        padding: 0.625rem 1.25rem;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .add-division-btn:hover {
        border-color: #4b5563;
        background-color: #f3f4f6;
        color: #1f2937;
    }
    
    .add-division-btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(107, 114, 128, 0.25);
        outline: none;
    }
    
    .add-file-btn {
        border: 1px solid #6b7280;
        background-color: #ffffff;
        color: #374151;
        font-weight: 500;
        padding: 0.625rem 1.25rem;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .add-file-btn:hover {
        border-color: #4b5563;
        background-color: #f3f4f6;
        color: #1f2937;
    }
    
    .add-file-btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(107, 114, 128, 0.25);
        outline: none;
    }
    
    /* Division Tags - Outline Style like Button */
    .division-tag {
        display: inline-flex;
        align-items: center;
        background-color: #ffffff;
        border: 1px solid #6b7280;
        color: #374151;
        padding: 0.5rem 0.875rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        gap: 0.5rem;
        transition: all 0.3s ease;
        animation: fadeInScale 0.3s ease-out;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .division-tag:hover {
        border-color: #4b5563;
        background-color: #f9fafb;
    }
    
    .division-tag .remove-btn {
        background: none;
        border: none;
        color: #6b7280;
        font-size: 1rem;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.15s ease;
    }
    
    .division-tag .remove-btn:hover {
        background-color: #f3f4f6;
        color: #374151;
        transform: scale(1.1);
    }
    
    /* Dropdown styles */
    .dropdown-menu {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #e5e7eb;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    
    .division-option {
        padding: 0.75rem 1rem;
        transition: background-color 0.15s ease;
    }
    
    .division-option:hover {
        background-color: #f3f4f6;
        color: #1f2937;
    }
    
    .division-option.selected {
        background-color: #e5e7eb;
        color: #374151;
        font-weight: 500;
    }
    
    /* Info panel - Simple text style */
    .related-divisions-info {
        margin-top: 0.5rem;
        animation: fadeIn 0.3s ease-out;
    }
    
    .related-divisions-info .text-muted {
        font-size: 0.875rem;
        color: #6b7280 !important;
    }
    
    /* Animations */
    @@keyframes fadeInScale {
        from {
            opacity: 0;
            transform: scale(0.9);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    /* Empty state */
    .empty-divisions-state {
        text-align: center;
        color: #6b7280;
        font-style: italic;
        padding: 1rem;
    }
    

    /* Responsive design */
    @@media (max-width: 768px) {
        .related-divisions-container {
            padding: 0.75rem;
        }
        
        .division-tag {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
        
        .add-division-btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Related Divisions Dropdown
        initializeRelatedDivisionsSelect();
        
        // Handle File Preview
        initializeFilePreview();
        
        // Initialize Validated Saving Cost Visual Feedback
        initializeValidatedSavingCostFeedback();
        
        // Initialize file upload for approval
        initializeApprovalFileUpload();

        // Handle Approve form
        const approveForm = document.querySelector('form[action*="Approve"]');
        if (approveForm) {
            approveForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Client-side validation - Handle conditional field
                const validatedSavingCostHidden = document.getElementById('validatedCostHidden');
                const validatedSavingCostDisplay = document.getElementById('validatedCostDisplay');
                const approvalComments = document.querySelector('textarea[name="ApprovalComments"]').value;

                // Validate conditional file requirement
                const hasInitiatorFiles = @Html.Raw(Json.Serialize(Model.HasInitiatorFiles));
                const hasApprovalFiles = selectedApprovalFiles.length > 0;
                
                if (!hasInitiatorFiles && !hasApprovalFiles) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Files Required',
                        text: 'Please upload at least one file since initiator did not upload any files.'
                    });
                    return;
                }
                
                // Validate Validated Saving Cost only if field exists (Stage 1+)
                if (validatedSavingCostHidden && validatedSavingCostDisplay) {
                    const numericValue = validatedSavingCostHidden.value;
                    const displayValue = validatedSavingCostDisplay.value;
                    
                    if (!displayValue.trim()) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning!',
                            text: 'Validated saving cost is required'
                        });
                        return;
                    }
                    
                    if (!numericValue || parseFloat(numericValue) <= 0 || isNaN(parseFloat(numericValue))) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning!',
                            text: 'Validated saving cost must be greater than 0'
                        });
                        return;
                    }
                }
                // For Stage 0: Skip validated saving cost validation
                
                if (!approvalComments.trim()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Approval comments are required'
                    });
                    return;
                }
                
                // Get selected related divisions from tags interface
                const selectedInput = document.getElementById('selectedDivisionsInput');
                const selectedDivisionIds = selectedInput.value ? selectedInput.value.split(',') : [];
                const selectedDivisionNames = [];
                
                // Get division names from the tags displayed
                const divisionTags = document.querySelectorAll('.division-tag span');
                divisionTags.forEach(tag => {
                    selectedDivisionNames.push(tag.textContent.trim());
                });
                
                let confirmText = 'Are you sure you want to approve this idea?';
                if (selectedDivisionNames.length > 0) {
                    confirmText = 'Are you sure you want to approve this idea? Workstream Leaders from selected divisions will be notified.';
                }
                
                Swal.fire({
                    title: 'Confirm Approval',
                    text: confirmText,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, Approve!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        const approveBtn = document.getElementById('approveBtn');
                        const originalBtnContent = approveBtn.innerHTML;
                        approveBtn.disabled = true;
                        approveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
                        
                        // Submit form by creating a new form submission
                        const formData = new FormData(approveForm);
                        fetch(approveForm.action, {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            // Reset button state
                            approveBtn.disabled = false;
                            approveBtn.innerHTML = originalBtnContent;
                            
                            if (response.redirected) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Idea has been approved successfully!',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = response.url;
                                });
                            }
                        }).catch(error => {
                            // Reset button state on error
                            approveBtn.disabled = false;
                            approveBtn.innerHTML = originalBtnContent;
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'An error occurred while processing approval.'
                            });
                        });
                    }
                });
            });
        }
        
        // Handle Reject form
        const rejectForm = document.querySelector('form[action*="Reject"]');
        if (rejectForm) {
            rejectForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const rejectionReason = document.querySelector('textarea[name="RejectionReason"]').value;
                if (!rejectionReason.trim()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning!',
                        text: 'Rejection reason is required'
                    });
                    return;
                }
                
                Swal.fire({
                    title: 'Confirm Rejection',
                    text: 'Are you sure you want to reject this idea?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, Reject!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        const rejectBtn = document.getElementById('rejectBtn');
                        const originalBtnContent = rejectBtn.innerHTML;
                        rejectBtn.disabled = true;
                        rejectBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
                        
                        // Submit form by creating a new form submission
                        const formData = new FormData(rejectForm);
                        fetch(rejectForm.action, {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            // Reset button state
                            rejectBtn.disabled = false;
                            rejectBtn.innerHTML = originalBtnContent;
                            
                            if (response.redirected) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Idea has been rejected successfully!',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = response.url;
                                });
                            }
                        }).catch(error => {
                            // Reset button state on error
                            rejectBtn.disabled = false;
                            rejectBtn.innerHTML = originalBtnContent;
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'An error occurred while processing rejection.'
                            });
                        });
                    }
                });
            });
        }
    });

    // File Preview Functions
    function initializeFilePreview() {
        const viewButtons = document.querySelectorAll('.view-attachment-btn');
        
        viewButtons.forEach(button => {
            button.addEventListener('click', function() {
                const filename = this.dataset.filename;
                const viewUrl = this.dataset.viewUrl;
                const downloadUrl = this.dataset.downloadUrl;
                
                showFilePreview(filename, viewUrl, downloadUrl);
            });
        });
    }
    
    // Re-initialize on window resize (for mobile/desktop switch)
    window.addEventListener('resize', function() {
        setTimeout(() => {
            initializeFilePreview();
        }, 100);
    });

    function showFilePreview(filename, viewUrl, downloadUrl) {
        const modal = new bootstrap.Modal(document.getElementById('attachmentModal'));
        const modalTitle = document.getElementById('attachmentModalLabel');
        const modalBody = document.getElementById('attachment-preview');
        const downloadBtn = document.getElementById('modalDownloadBtn');
        
        // Update modal title
        modalTitle.innerHTML = `<i class="bi bi-file-earmark me-2"></i>Preview: ${filename}`;
        
        // Show loading state
        modalBody.innerHTML = `
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading file preview...</p>
            </div>
        `;
        
        // Setup download button
        downloadBtn.href = downloadUrl;
        downloadBtn.style.display = 'inline-block';
        
        // Show modal
        modal.show();
        
        // Force modal recalculation for mobile
        if (window.innerWidth <= 768) {
            setTimeout(() => {
                if (modal.handleUpdate) {
                    modal.handleUpdate();
                }
                // Force modal display
                const modalElement = document.getElementById('attachmentModal');
                if (modalElement) {
                    modalElement.style.display = 'block';
                    modalElement.classList.add('show');
                }
            }, 100);
        }
        
        // Determine file type and show appropriate preview
        const extension = filename.split('.').pop().toLowerCase();
        
        setTimeout(() => {
            loadFilePreview(extension, filename, viewUrl, downloadUrl, modalBody);
        }, window.innerWidth <= 768 ? 500 : 300); // Longer delay for mobile
    }

    function loadFilePreview(extension, filename, viewUrl, downloadUrl, modalBody) {
        const isMobile = window.innerWidth <= 768;
        
        if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension)) {
            // Image preview
            showImagePreview(viewUrl, filename, modalBody);
            
        } else if (extension === 'pdf') {
            // PDF preview (desktop only)
            showPdfPreview(viewUrl, filename, modalBody);
            
        } else if (['ppt', 'pptx'].includes(extension)) {
            // PowerPoint - Download only
            showUnsupportedFile(filename, downloadUrl, modalBody, 'file-earmark-ppt', 'PowerPoint Presentation');
            
        } else if (['doc', 'docx'].includes(extension)) {
            // Word document - Download only
            showUnsupportedFile(filename, downloadUrl, modalBody, 'file-earmark-word', 'Word Document');
            
        } else if (['xls', 'xlsx'].includes(extension)) {
            // Excel document - Download only
            showUnsupportedFile(filename, downloadUrl, modalBody, 'file-earmark-excel', 'Excel Spreadsheet');
            
        } else if (extension === 'txt') {
            // Text file - Could show content
            showTextPreview(viewUrl, filename, modalBody);
            
        } else {
            // Unknown file type
            showUnsupportedFile(filename, downloadUrl, modalBody, 'file-earmark', 'Unknown File Type');
        }
    }

    function showImagePreview(viewUrl, filename, modalBody) {
        const img = new Image();
        const isMobile = window.innerWidth <= 768;
        
        // Set timeout for mobile loading
        let loadTimeout = setTimeout(() => {
            if (isMobile) {
                showErrorPreview('Loading timeout - check connection', modalBody);
            }
        }, isMobile ? 8000 : 10000);
        
        img.onload = function() {
            clearTimeout(loadTimeout);
            modalBody.innerHTML = `
                <div class="text-center p-3">
                    <img src="${viewUrl}" class="img-fluid" alt="${filename}" style="max-height: ${isMobile ? '60vh' : '70vh'};">
                </div>
            `;
        };
        
        img.onerror = function() {
            clearTimeout(loadTimeout);
            if (isMobile) {
                // Fallback to download for mobile
                showUnsupportedFile(filename, viewUrl, modalBody, 'file-earmark-image', 'Image File - Download to View');
            } else {
                showErrorPreview('Failed to load image', modalBody);
            }
        };
        
        img.src = viewUrl;
    }

    function showPdfPreview(viewUrl, filename, modalBody) {
        const isMobile = window.innerWidth <= 768;
        
        // Set timeout untuk mobile PDF loading
        if (isMobile) {
            let pdfTimeout = setTimeout(() => {
                // Fallback ke download kalau PDF tidak load dalam 5 detik
                showUnsupportedFile(filename, viewUrl, modalBody, 'file-earmark-pdf', 'PDF Document - Download to View');
            }, 5000);
            
            // Clear timeout jika user manually close modal
            document.getElementById('attachmentModal').addEventListener('hidden.bs.modal', () => {
                clearTimeout(pdfTimeout);
            }, { once: true });
        }
        
        modalBody.innerHTML = `
            <div class="p-2">
                <iframe src="${viewUrl}" style="width: 100%; height: ${isMobile ? '60vh' : '70vh'}; min-height: ${isMobile ? '350px' : '400px'}; border: none;" title="${filename}" onload="console.log('PDF loaded successfully')">
                    <p>Your browser does not support PDFs. <a href="${viewUrl}">Download the PDF</a>.</p>
                </iframe>
            </div>
        `;
    }

    function showTextPreview(viewUrl, filename, modalBody) {
        fetch(viewUrl)
            .then(response => response.text())
            .then(text => {
                modalBody.innerHTML = `
                    <div class="p-4">
                        <pre class="bg-light p-3 rounded" style="max-height: 60vh; overflow-y: auto; white-space: pre-wrap;">${escapeHtml(text)}</pre>
                    </div>
                `;
            })
            .catch(error => {
                showErrorPreview('Failed to load text file', modalBody);
            });
    }

    function showUnsupportedFile(filename, downloadUrl, modalBody, iconClass, fileType) {
        modalBody.innerHTML = `
            <div class="file-preview-error">
                <i class="bi bi-${iconClass} text-warning mb-3" style="font-size: 4rem;"></i>
                <h5>${fileType}</h5>
                <p class="text-muted mb-4">Preview not available for this file type</p>
                <a href="${downloadUrl}" class="btn btn-primary btn-lg">
                    <i class="bi bi-download me-2"></i>Download ${filename}
                </a>
            </div>
        `;
    }

    function showErrorPreview(message, modalBody) {
        modalBody.innerHTML = `
            <div class="file-preview-error">
                <i class="bi bi-exclamation-triangle text-danger"></i>
                <h5>Preview Error</h5>
                <p class="text-muted">${message}</p>
            </div>
        `;
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // Related Divisions Button + Tags Functions
    function initializeRelatedDivisionsSelect() {
        initializeDivisionsTagsInterface();
    }
    
    function initializeDivisionsTagsInterface() {
        const addBtn = document.getElementById('addDivisionBtn');
        const dropdownItems = document.querySelectorAll('.division-option');
        const selectedInput = document.getElementById('selectedDivisionsInput');
        const tagsContainer = document.getElementById('selectedDivisionsTags');
        const infoPanel = document.getElementById('divisionsInfo');
        
        if (!addBtn || !selectedInput || !tagsContainer) return;
        
        // Store selected divisions
        let selectedDivisions = [];
        
        // Handle dropdown item clicks
        dropdownItems.forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                
                const divisionId = this.dataset.divisionId;
                const divisionName = this.dataset.divisionName;
                
                // Check if already selected
                if (!selectedDivisions.find(d => d.id === divisionId)) {
                    // Add to selected list
                    selectedDivisions.push({ id: divisionId, name: divisionName });
                    
                    // Update UI
                    updateTagsDisplay();
                    updateDropdownOptions();
                    updateHiddenInput();
                    updateInfoPanel();
                    
                    // Close dropdown
                    bootstrap.Dropdown.getInstance(addBtn)?.hide();
                }
            });
        });
        
        function updateTagsDisplay() {
            tagsContainer.innerHTML = '';
            
            selectedDivisions.forEach((division, index) => {
                const tag = document.createElement('div');
                tag.className = 'division-tag';
                tag.innerHTML = `
                    <span>${division.name}</span>
                    <button type="button" class="remove-btn" data-index="${index}" title="Remove ${division.name}">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                
                // Add remove functionality
                const removeBtn = tag.querySelector('.remove-btn');
                removeBtn.addEventListener('click', function() {
                    const indexToRemove = parseInt(this.dataset.index);
                    selectedDivisions.splice(indexToRemove, 1);
                    updateTagsDisplay();
                    updateDropdownOptions();
                    updateHiddenInput();
                    updateInfoPanel();
                });
                
                tagsContainer.appendChild(tag);
            });
        }
        
        function updateDropdownOptions() {
            dropdownItems.forEach(item => {
                const divisionId = item.dataset.divisionId;
                const isSelected = selectedDivisions.find(d => d.id === divisionId);
                
                if (isSelected) {
                    item.classList.add('selected');
                    item.style.display = 'none'; // Hide selected items
                } else {
                    item.classList.remove('selected');
                    item.style.display = 'block';
                }
            });
            
            // Update button text
            const availableCount = Array.from(dropdownItems).filter(item => item.style.display !== 'none').length;
            if (availableCount === 0) {
                addBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>All Divisions Selected';
                addBtn.classList.add('disabled');
                addBtn.style.opacity = '0.6';
            } else {
                addBtn.innerHTML = '<i class="bi bi-building-add me-2"></i>Select Division';
                addBtn.classList.remove('disabled');
                addBtn.style.opacity = '1';
            }
        }
        
        function updateHiddenInput() {
            const selectedIds = selectedDivisions.map(d => d.id);
            selectedInput.value = selectedIds.join(',');
        }
        
        function updateInfoPanel() {
            const selectedCount = document.getElementById('selectedCount');
            
            if (selectedDivisions.length > 0) {
                infoPanel.classList.remove('d-none');
                selectedCount.textContent = selectedDivisions.length;
            } else {
                infoPanel.classList.add('d-none');
            }
        }
        
        // Initialize display
        updateTagsDisplay();
        updateDropdownOptions();
        updateInfoPanel();
    }
    
    // Validated Saving Cost Formatting - Only for Stage 1+
    function initializeValidatedSavingCostFeedback() {
        const displayInput = document.getElementById('validatedCostDisplay');
        const hiddenInput = document.getElementById('validatedCostHidden');
        
        // Check if fields exist (only for Stage 1+)
        if (!displayInput || !hiddenInput) {
            return; // Fields not present for Stage 0
        }
        
        // Initialize field based on stage
        const currentStage = @Model.Idea.CurrentStage;
        const originalValue = hiddenInput.value;
        
        if (currentStage > 0 && originalValue && originalValue !== '') {
            // Stage 1+: Auto-fill from previous approver
            displayInput.value = formatNumberWithCommas(originalValue);
            hiddenInput.value = originalValue;
        } else {
            // Stage 0: Start empty, approver fills manually
            displayInput.value = '';
            hiddenInput.value = '';
        }
        
        // Real-time formatting dan sync
        displayInput.addEventListener('input', function() {
            var value = this.value;
            
            // Remove all non-digit characters (integers only)
            var numericValue = value.replace(/[^\d]/g, '');
            
            // Format display field dengan thousand separator
            if (numericValue) {
                var formattedValue = formatNumberWithCommas(numericValue);
                this.value = formattedValue;
                
                // Store raw numeric value in hidden field
                hiddenInput.value = numericValue;
            } else {
                hiddenInput.value = '';
            }
        });
    }
    
    // Currency formatting function (integers only)
    function formatNumberWithCommas(value) {
        // Add commas to integer part
        return value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    // Global variables for approval file upload
    let selectedApprovalFiles = [];
    let approvalFileCounter = 0;

    // Approval File Upload Functions
    function initializeApprovalFileUpload() {
        const fileInput = document.getElementById('approvalFileInput');
        if (!fileInput) return;

        fileInput.addEventListener('change', function() {
            const file = this.files[0];
            if (!file) return;
            
            // Check file size (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                Swal.fire({
                    icon: 'warning',
                    title: 'File Too Large',
                    text: 'File size must be less than 10MB',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            // Add file to array
            const fileObj = {
                id: approvalFileCounter++,
                file: file,
                name: file.name,
                size: file.size,
                type: file.type
            };
            
            selectedApprovalFiles.push(fileObj);
            addApprovalFileToList(fileObj);
            createHiddenApprovalInput(fileObj);
            updateApprovalFilesDisplay();
            
            // Reset input
            this.value = '';
        });
    }

    function addApprovalFileToList(fileObj) {
        const fileSize = formatFileSize(fileObj.size);
        const fileIcon = getFileIcon(fileObj.name);
        
        const fileItem = `
            <div class="d-flex align-items-center justify-content-between p-2 border rounded mb-2 bg-white" id="approvalFile-${fileObj.id}">
                <div class="d-flex align-items-center">
                    <i class="bi ${fileIcon} fs-4 me-3 text-primary"></i>
                    <div>
                        <div class="fw-medium">${fileObj.name}</div>
                        <small class="text-muted">${fileSize}</small>
                    </div>
                </div>
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeApprovalFile(${fileObj.id})">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        `;
        
        document.getElementById('approvalFilesList').insertAdjacentHTML('beforeend', fileItem);
    }
    
    function removeApprovalFile(fileId) {
        // Remove from array
        selectedApprovalFiles = selectedApprovalFiles.filter(f => f.id !== fileId);
        
        // Remove from UI
        document.getElementById(`approvalFile-${fileId}`)?.remove();
        document.getElementById(`hiddenApprovalFile-${fileId}`)?.remove();
        
        updateApprovalFilesDisplay();
    }

    function createHiddenApprovalInput(fileObj) {
        const input = document.createElement('input');
        input.type = 'file';
        input.name = 'ApprovalFiles';
        input.id = `hiddenApprovalFile-${fileObj.id}`;
        input.style.display = 'none';
        
        // Create a DataTransfer object to set the file
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(fileObj.file);
        input.files = dataTransfer.files;
        
        document.getElementById('hiddenApprovalFileInputs').appendChild(input);
    }
    
    function updateApprovalFilesDisplay() {
        const noFilesMsg = document.getElementById('noApprovalFilesMessage');
        
        if (selectedApprovalFiles.length === 0) {
            noFilesMsg.style.display = 'block';
        } else {
            noFilesMsg.style.display = 'none';
        }
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    function getFileIcon(filename) {
        const ext = filename.toLowerCase().split('.').pop();
        const icons = {
            'pdf': 'bi-file-earmark-pdf',
            'doc': 'bi-file-earmark-word',
            'docx': 'bi-file-earmark-word',
            'xls': 'bi-file-earmark-excel',
            'xlsx': 'bi-file-earmark-excel',
            'ppt': 'bi-file-earmark-ppt',
            'pptx': 'bi-file-earmark-ppt',
            'jpg': 'bi-file-earmark-image',
            'jpeg': 'bi-file-earmark-image',
            'png': 'bi-file-earmark-image',
            'gif': 'bi-file-earmark-image'
        };
        return icons[ext] || 'bi-file-earmark';
    }

    // Make functions global
    window.removeApprovalFile = removeApprovalFile;
</script>
