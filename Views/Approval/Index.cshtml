@model Ideku.ViewModels.Approval.ApprovalListViewModel
@{
    ViewData["Title"] = "Pending Approvals";
}

<div class="container-fluid">
    <div class="page-header mb-4">
        <h2 class="page-title text-gradient">
            <i class="bi bi-check2-circle me-2"></i>Need Approval
        </h2>
        <p class="text-muted">List of ideas waiting for your review and approval.</p>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Integrated Filter and Table Card -->
    <div class="card filter-card">
        <div class="card-body p-4">
            <form method="get" asp-action="Index">
                <div class="row g-3">
                    <!-- Search Input with Clear Button -->
                    <div class="col-12">
                        <div class="d-flex gap-2">
                            <div class="input-group flex-grow-1">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" 
                                       id="searchTerm"
                                       name="searchTerm" 
                                       value="@Model.SearchTerm"
                                       class="form-control" 
                                       placeholder="Search by Idea ID, Title, or Initiator...">
                            </div>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary text-nowrap clear-all-btn">
                                <i class="bi bi-arrow-clockwise me-1"></i>Clear All
                            </a>
                        </div>
                    </div>

                    <!-- Filters in Horizontal Layout -->
                    
                    <!-- Division -->
                    <div class="col-lg-3 col-md-6">
                        <label class="form-label">Division</label>
                        <select id="selectedDivision" name="selectedDivision" class="form-select">
                            <option value="">All Divisions</option>
                            @if (ViewBag.Divisions != null)
                            {
                                @foreach (var division in (IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)ViewBag.Divisions)
                                {
                                    if (!string.IsNullOrEmpty(division.Value))
                                    {
                                        <option value="@division.Value" selected="@(Model.SelectedDivision == division.Value)">@division.Text</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <!-- Department -->
                    <div class="col-lg-3 col-md-6">
                        <label class="form-label">Department</label>
                        <select id="selectedDepartment" name="selectedDepartment" class="form-select">
                            <option value="">Please select Division first</option>
                        </select>
                    </div>

                    <!-- Category -->
                    <div class="col-lg-2 col-md-4">
                        <label class="form-label">Category</label>
                        <select id="selectedCategory" name="selectedCategory" class="form-select">
                            <option value="">All Categories</option>
                            @if (ViewBag.Categories != null)
                            {
                                @foreach (var category in (IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)ViewBag.Categories)
                                {
                                    if (!string.IsNullOrEmpty(category.Value))
                                    {
                                        <option value="@category.Value" selected="@(Model.SelectedCategory.ToString() == category.Value)">@category.Text</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <!-- Stage -->
                    <div class="col-lg-2 col-md-4">
                        <label class="form-label">Stage</label>
                        <select id="selectedStage" name="selectedStage" class="form-select">
                            <option value="">All Stages</option>
                            <option value="0" selected="@(Model.SelectedStage == 0)">Stage S0</option>
                            <option value="1" selected="@(Model.SelectedStage == 1)">Stage S1</option>
                            <option value="2" selected="@(Model.SelectedStage == 2)">Stage S2</option>
                        </select>
                    </div>

                    <!-- Status -->
                    <div class="col-lg-2 col-md-4">
                        <label class="form-label">Status</label>
                        <select id="selectedStatus" name="selectedStatus" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="Waiting Approval S1" selected="@(Model.SelectedStatus == "Waiting Approval S1")">Waiting Approval S1</option>
                            <option value="Waiting Approval S2" selected="@(Model.SelectedStatus == "Waiting Approval S2")">Waiting Approval S2</option>
                            <option value="Rejected S0" selected="@(Model.SelectedStatus == "Rejected S0")">Rejected S0</option>
                            <option value="Approved" selected="@(Model.SelectedStatus == "Approved")">Approved</option>
                        </select>
                    </div>
                </div>
            </form>
        </div>
        
        <!-- Table Section -->
        <div class="card-body border-top">
            @if (Model.IdeasForApproval.Any())
            {
                <div class="table-responsive-custom">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Idea ID</th>
                                <th style="min-width: 250px;">Idea Title</th>
                                <th style="min-width: 150px;">Initiator</th>
                                <th style="min-width: 200px;">Division</th>
                                <th style="min-width: 200px;">Department</th>
                                <th>Category</th>
                                <th>Event</th>
                                <th>Stage</th>
                                <th>Saving Cost</th>
                                <th>Status</th>
                                <th>Submitted</th>
                            </tr>
                        </thead>
                        <tbody id="ideas-table-body">
                            @foreach (var idea in Model.IdeasForApproval)
                            {
                                <tr style="cursor: pointer;" onclick="window.location='@Url.Action("Review", "Approval", new { id = idea.Id })'">
                                    <td><span class="badge bg-light text-dark">@idea.IdeaCode</span></td>
                                    <td>
                                        <div class="truncate-title" title="@idea.IdeaName">
                                            @idea.IdeaName
                                        </div>
                                    </td>
                                    <td>
                                        <strong>@idea.InitiatorUser?.Name</strong>
                                    </td>
                                    <td>
                                        <strong>@idea.TargetDivision?.NameDivision</strong>
                                    </td>
                                    <td>
                                        <small class="text-muted">@idea.TargetDepartment?.NameDepartment</small>
                                    </td>
                                    <td>
                                        @{
                                            var categoryClass = idea.Category?.CategoryName switch
                                            {
                                                "Cost Reduction (CR)" => "bg-success",
                                                "Digitalization" => "bg-primary",
                                                "General Transformation" => "bg-info text-dark",
                                                "Increase Revenue" => "bg-warning text-dark",
                                                _ => "bg-secondary"
                                            };
                                        }
                                        <span class="badge @categoryClass">@idea.Category?.CategoryName</span>
                                    </td>
                                    <td>
                                        @if (idea.Event != null)
                                        {
                                            var eventClass = idea.Event.EventName switch
                                            {
                                                "CI Academy" => "bg-purple text-white",
                                                "Hackathon" => "bg-orange text-white",
                                                _ => "bg-light text-dark"
                                            };
                                            <span class="badge @eventClass">@idea.Event.EventName</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">S@(idea.CurrentStage)</span>
                                    </td>
                                    <td>
                                        <span class="fw-bold text-success">@idea.SavingCost.ToString("C")</span>
                                    </td>
                                    <td>
                                        @{
                                            var statusClass = idea.CurrentStatus switch
                                            {
                                                var s when s.StartsWith("Waiting Approval") => "bg-warning text-dark",
                                                var s when s.StartsWith("Rejected S") => "bg-danger",
                                                "Approved" => "bg-success",
                                                "Rejected" => "bg-danger",
                                                "Completed" => "bg-primary",
                                                _ => "bg-secondary"
                                            };
                                        }
                                        <span class="badge @statusClass">@idea.CurrentStatus</span>
                                    </td>
                                    <td>
                                        <div>@idea.SubmittedDate.ToString("MMM dd")</div>
                                        <small class="text-muted">@idea.SubmittedDate.ToString("HH:mm")</small>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center p-5">
                    <i class="bi bi-check-all fs-1 text-success"></i>
                    <h4 class="mt-3">All Clear!</h4>
                    <p class="text-muted">You have no pending approvals at the moment.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .page-header {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 2rem;
        border-radius: 1rem;
        border: 1px solid #e5e7eb;
    }
    
    .page-title {
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .card {
        border: none;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-radius: 1rem;
    }
    
    .table thead th {
        background: #f8fafc;
        border: none;
        font-weight: 600;
        color: #374151;
    }
    
    .text-gradient {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .table-responsive-custom {
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .table-responsive-custom > .table > thead > tr > th,
    .table-responsive-custom > .table > tbody > tr > td {
        white-space: nowrap;
    }

    .truncate-title {
        max-width: 250px; /* Adjust as needed */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Hover effects for clickable rows */
    tbody tr {
        transition: all 0.2s ease-in-out;
    }

    tbody tr:hover {
        background-color: #f8fafc !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        transform: translateY(-1px);
    }

    tbody tr:active {
        transform: translateY(0);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .bg-purple {
        background-color: #8b5cf6 !important;
    }

    .bg-orange {
        background-color: #f97316 !important;
    }

    /* Simplified Integrated Card Styling */
    .filter-card {
        border: none;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        margin-bottom: 2rem;
    }


    /* Table section styling */
    .card-body.border-top {
        border-top: 1px solid #e5e7eb !important;
        padding: 1.5rem;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }

    /* Clear All button styling */
    .clear-all-btn {
        padding: 0.375rem 0.75rem;
        height: auto;
        min-height: calc(1.5em + 0.75rem + 2px);
        display: flex;
        align-items: center;
        border-radius: 0.375rem;
    }

    .btn-outline-secondary:hover {
        background-color: #f8f9fa !important;
        border-color: #6c757d !important;
        color: #6c757d !important;
    }
</style>

<script>
/**
 * Approval Filter System
 * Real-time AJAX filtering with cascading dropdowns
 */
document.addEventListener('DOMContentLoaded', function() {
    // DOM element references
    const searchInput = document.getElementById('searchTerm');
    const divisionSelect = document.getElementById('selectedDivision');
    const departmentSelect = document.getElementById('selectedDepartment');
    const categorySelect = document.getElementById('selectedCategory');
    const stageSelect = document.getElementById('selectedStage');
    const statusSelect = document.getElementById('selectedStatus');
    const tableBody = document.getElementById('ideas-table-body');
    
    let debounceTimeout;

    // Initialize cascading dropdown state on page load
    const initialDivision = divisionSelect.value;
    const initialDepartment = '@Model.SelectedDepartment';
    
    if (initialDivision && initialDivision !== '') {
        loadDepartmentsForDivision(initialDivision, initialDepartment);
    }

    // Debounced search input
    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => applyFilters(), 300);
    });

    // Dropdown change events
    [departmentSelect, categorySelect, stageSelect, statusSelect].forEach(select => {
        select.addEventListener('change', applyFilters);
    });

    // Function to load departments for a division
    function loadDepartmentsForDivision(divisionId, selectedDepartmentId = '') {
        if (!divisionId) {
            departmentSelect.innerHTML = '<option value="">Please select Division first</option>';
            departmentSelect.value = '';
            return;
        }
        
        // Show simple loading state
        departmentSelect.innerHTML = '<option value="">Loading departments...</option>';
        departmentSelect.disabled = true;
        
        // Fetch departments for selected division
        fetch(`/Approval/GetDepartmentsByDivision?divisionId=${divisionId}`)
            .then(response => response.json())
            .then(data => {
                departmentSelect.innerHTML = '<option value="">All Departments</option>';
                
                if (data.success && data.departments) {
                    data.departments.forEach(dept => {
                        const option = document.createElement('option');
                        option.value = dept.id;
                        option.textContent = dept.name;
                        // Select the department if it matches the selectedDepartmentId
                        if (selectedDepartmentId && dept.id === selectedDepartmentId) {
                            option.selected = true;
                        }
                        departmentSelect.appendChild(option);
                    });
                }
            })
            .catch(error => {
                console.error('Error fetching departments:', error);
                departmentSelect.innerHTML = '<option value="">Error loading departments</option>';
            })
            .finally(() => {
                departmentSelect.disabled = false;
            });
    }

    // Special handling for Division dropdown (cascading)
    divisionSelect.addEventListener('change', function() {
        const divisionId = this.value;
        
        // Reset department dropdown
        departmentSelect.innerHTML = '<option value="">Please select Division first</option>';
        departmentSelect.value = '';
        
        if (!divisionId) {
            // If "All Divisions" selected, just apply filters
            applyFilters();
            return;
        }
        
        loadDepartmentsForDivision(divisionId);
        
        // Apply filters after department dropdown is updated
        setTimeout(() => applyFilters(), 500); // Small delay to ensure departments are loaded
    });

    function applyFilters() {
        const searchTerm = searchInput.value;
        const selectedDivision = divisionSelect.value;
        const selectedDepartment = departmentSelect.value;
        const selectedCategory = categorySelect.value;
        const selectedStage = stageSelect.value;
        const selectedStatus = statusSelect.value;

        // Check if all filters are empty - if so, reload original table
        const isAllEmpty = !searchTerm.trim() && 
                          !selectedDivision && 
                          !selectedDepartment && 
                          !selectedCategory && 
                          !selectedStage && 
                          !selectedStatus;

        if (isAllEmpty) {
            window.location.href = window.location.pathname; // Reload to original state
            return;
        }

        const params = new URLSearchParams({
            searchTerm,
            selectedDivision,
            selectedDepartment,
            selectedCategory,
            selectedStage,
            selectedStatus
        });

        // Show loading
        tableBody.innerHTML = '<tr><td colspan="11" class="text-center">Loading...</td></tr>';

        fetch(`/Approval/FilterIdeas?${params}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateTable(data.ideas);
                    updateResultCount(data.totalCount);
                } else {
                    tableBody.innerHTML = '<tr><td colspan="11" class="text-center text-danger">Error loading data</td></tr>';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                tableBody.innerHTML = '<tr><td colspan="11" class="text-center text-danger">Error loading data</td></tr>';
            });
    }

    // Helper functions for consistent styling
    function getCategoryClass(categoryName) {
        switch (categoryName) {
            case 'Cost Reduction (CR)': return 'bg-success';
            case 'Digitalization': return 'bg-primary';
            case 'General Transformation': return 'bg-info text-dark';
            case 'Increase Revenue': return 'bg-warning text-dark';
            default: return 'bg-secondary';
        }
    }

    function getEventClass(eventName) {
        switch (eventName) {
            case 'CI Academy': return 'bg-purple text-white';
            case 'Hackathon': return 'bg-orange text-white';
            default: return 'bg-light text-dark';
        }
    }

    function getStatusClass(status) {
        if (status.startsWith('Waiting Approval')) return 'bg-warning text-dark';
        if (status.startsWith('Rejected S')) return 'bg-danger';
        if (status === 'Approved') return 'bg-success';
        if (status === 'Rejected') return 'bg-danger';
        if (status === 'Completed') return 'bg-primary';
        return 'bg-secondary';
    }

    function formatCurrency(amount) {
        if (!amount || amount === 0) return '';
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(amount);
    }

    function formatDateTime(dateString) {
        const date = new Date(dateString);
        const dateStr = date.toLocaleDateString('en-US', {month: 'short', day: 'numeric'});
        const timeStr = date.toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit', hour12: false});
        return { dateStr, timeStr };
    }

    function createTableRow(idea) {
        const { dateStr, timeStr } = formatDateTime(idea.submittedDate);
        
        return `
            <tr style="cursor: pointer;" onclick="window.location='${idea.reviewUrl}'">
                <td><span class="badge bg-light text-dark">${idea.ideaCode}</span></td>
                <td>
                    <div class="truncate-title" title="${idea.ideaName}">
                        ${idea.ideaName}
                    </div>
                </td>
                <td><strong>${idea.initiatorName || ''}</strong></td>
                <td><strong>${idea.divisionName || ''}</strong></td>
                <td><small class="text-muted">${idea.departmentName || ''}</small></td>
                <td>
                    ${idea.categoryName ? `<span class="badge ${getCategoryClass(idea.categoryName)}">${idea.categoryName}</span>` : ''}
                </td>
                <td>
                    ${idea.eventName ? `<span class="badge ${getEventClass(idea.eventName)}">${idea.eventName}</span>` : ''}
                </td>
                <td><span class="badge bg-secondary">S${idea.currentStage}</span></td>
                <td>
                    ${idea.savingCost ? `<span class="fw-bold text-success">${formatCurrency(idea.savingCost)}</span>` : ''}
                </td>
                <td><span class="badge ${getStatusClass(idea.currentStatus)}">${idea.currentStatus}</span></td>
                <td>
                    <div>${dateStr}</div>
                    <small class="text-muted">${timeStr}</small>
                </td>
            </tr>
        `;
    }

    function updateTable(ideas) {
        if (ideas.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="11" class="text-center text-muted">No ideas found matching your filters</td></tr>';
            return;
        }

        const rows = ideas.map(createTableRow).join('');
        tableBody.innerHTML = rows;
    }

    function updateResultCount(count) {
        // Result count tracking (can be extended for UI display)
    }
});
</script>

