@model Ideku.ViewModels.WorkflowManagement.WorkflowDetailsViewModel

@{
    ViewData["Title"] = "Workflow Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link href="~/css/pages/workflow-management.css" rel="stylesheet" asp-append-version="true" />
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="page-header mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="d-flex align-items-center mb-2">
                            <a href="@Url.Action("Index", "WorkflowManagement")" class="btn btn-outline-secondary me-3" title="Back to Workflow List">
                                <i class="bi bi-arrow-left"></i>
                            </a>
                            <h2 class="page-title text-gradient mb-0">
                                <i class="bi bi-diagram-3 me-2"></i>Workflow Details
                            </h2>
                        </div>
                        <p class="text-muted">View and manage workflow stages and conditions</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Workflow Info Card -->
    <div class="row">
        <div class="col-xl-4">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="card-title mb-0">
                            <i class="bi bi-diagram-3 me-2 text-primary"></i>@Model.Workflow.WorkflowName
                        </h4>
                        <div class="d-flex gap-1">
                            <button type="button" class="btn btn-outline-primary workflow-action-btn" onclick="openEditWorkflowModal(@Model.Workflow.Id, '@Model.Workflow.WorkflowName', '@Model.Workflow.Desc', @Model.Workflow.IsActive.ToString().ToLower())" title="Edit Workflow">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button type="button" class="btn btn-outline-danger workflow-action-btn" onclick="confirmDeleteWorkflow(@Model.Workflow.Id, '@Model.Workflow.WorkflowName')" title="Delete Workflow">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-borderless mb-0">
                            <tbody>
                                <tr>
                                    <td class="fw-medium">Description:</td>
                                    <td>@Model.Workflow.Desc</td>
                                </tr>
                                <tr>
                                    <td class="fw-medium">Status:</td>
                                    <td>
                                        @if (Model.Workflow.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td class="fw-medium">Stages:</td>
                                    <td><span class="badge bg-info">@Model.Workflow.WorkflowStages.Count()</span></td>
                                </tr>
                                <tr>
                                    <td class="fw-medium">Conditions:</td>
                                    <td><span class="badge bg-warning text-dark">@Model.Workflow.WorkflowConditions.Count()</span></td>
                                </tr>
                                <tr>
                                    <td class="fw-medium">Created:</td>
                                    <td>@Model.Workflow.CreatedAt.ToString("dd MMM yyyy")</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Workflow Stages -->
        <div class="col-xl-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">
                        <i class="bi bi-list-ol me-2 text-success"></i>Workflow Stages
                    </h4>
                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addStageModal">
                        <i class="bi bi-plus-lg me-1"></i>Add Stage
                    </button>
                </div>
                <div class="card-body">
                    @if (Model.Workflow.WorkflowStages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Stage #</th>
                                        <th>Level</th>
                                        <th>Mandatory</th>
                                        <th>Parallel</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stage in Model.Workflow.WorkflowStages.OrderBy(s => s.Stage))
                                    {
                                        <tr>
                                            <td><span class="badge bg-primary">@stage.Stage</span></td>
                                            <td>@stage.Approver.ApproverName</td>
                                            <td>
                                                @if (stage.IsMandatory)
                                                {
                                                    <span class="badge bg-danger">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No</span>
                                                }
                                            </td>
                                            <td>
                                                @if (stage.IsParallel)
                                                {
                                                    <span class="badge bg-info">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No</span>
                                                }
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteStage(@stage.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-list-ol display-4 text-muted"></i>
                            <h5 class="text-muted mt-3">No Stages Added</h5>
                            <p class="text-muted">Start by adding stages to define the workflow approval process.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Workflow Conditions -->
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">
                        <i class="bi bi-funnel me-2 text-warning"></i>Workflow Conditions
                    </h4>
                    <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#addConditionModal">
                        <i class="bi bi-plus-lg me-1"></i>Add Condition
                    </button>
                </div>
                <div class="card-body">
                    @if (Model.Workflow.WorkflowConditions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Type</th>
                                        <th>Operator</th>
                                        <th>Value</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var condition in Model.Workflow.WorkflowConditions)
                                    {
                                        <tr>
                                            <td><span class="badge bg-info">@condition.ConditionType</span></td>
                                            <td><span class="badge bg-secondary">@condition.Operator</span></td>
                                            <td>@condition.ConditionValue</td>
                                            <td>
                                                @if (condition.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteCondition(@condition.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-funnel display-4 text-muted"></i>
                            <h5 class="text-muted mt-3">No Conditions Added</h5>
                            <p class="text-muted">Add conditions to specify when this workflow should be applied.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Workflow Modal -->
<div class="modal fade" id="editWorkflowModal" tabindex="-1" aria-labelledby="editWorkflowModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content app-modal">
            <div class="modal-header app-modal-header">
                <div class="d-flex align-items-center">
                    <div class="modal-icon">
                        <i class="bi bi-pencil-square"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0" id="editWorkflowModalLabel">Edit Workflow</h5>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editWorkflowForm">
                <div class="modal-body app-modal-body">
                    <input type="hidden" id="editWorkflowId" name="id">
                    
                    <!-- Workflow Name -->
                    <div class="mb-4">
                        <label for="editWorkflowName" class="form-label">Workflow Name <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-diagram-3"></i>
                                WF_
                            </span>
                            <input type="text" class="form-control" id="editWorkflowName" name="workflowName" maxlength="17" required 
                                   placeholder="E.G. STANDARD, EMERGENCY, ETC." style="text-transform: uppercase;">
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Enter workflow identifier (will be prefixed with WF_ and converted to uppercase)
                        </div>
                    </div>
                    
                    <!-- Description -->
                    <div class="mb-4">
                        <label for="editDesc" class="form-label">Description</label>
                        <textarea class="form-control" id="editDesc" name="desc" rows="3" maxlength="200" placeholder="Enter workflow description (optional)"></textarea>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Maximum 200 characters
                        </div>
                    </div>
                    
                    <!-- Status -->
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="editIsActive" name="isActive">
                            <label class="form-check-label" for="editIsActive">
                                <strong>Active Workflow</strong>
                            </label>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Inactive workflows will not be available for new ideas
                        </div>
                    </div>
                </div>
                <div class="modal-footer app-modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary btn-save">
                        <i class="bi bi-check-circle me-2"></i>Update Workflow
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Stage Modal -->
<div class="modal fade" id="addStageModal" tabindex="-1" aria-labelledby="addStageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content app-modal">
            <div class="modal-header app-modal-header">
                <div class="d-flex align-items-center">
                    <div class="modal-icon">
                        <i class="bi bi-list-ol"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0" id="addStageModalLabel">Add Workflow Stage</h5>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addStageForm">
                <div class="modal-body app-modal-body">
                    <input type="hidden" id="workflowId" value="@Model.Workflow.Id" />

                    <!-- Stage Number -->
                    <div class="mb-4">
                        <label for="stage" class="form-label">Stage Number <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-hash"></i>
                            </span>
                            <input type="number" class="form-control" id="stage" min="1" required />
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            The order of this stage in the workflow
                        </div>
                    </div>
                    
                    <!-- Level Selection -->
                    <div class="mb-4">
                        <label for="levelId" class="form-label">Level <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-layers"></i>
                            </span>
                            <select class="form-select" id="levelId" required>
                                <option value="">Select Level</option>
                                @foreach (var level in Model.LevelList)
                                {
                                    <option value="@level.Value">@level.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Choose the approval level for this stage
                        </div>
                    </div>
                    
                    <!-- Stage Options -->
                    <div class="mb-4">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="isMandatory" checked />
                            <label class="form-check-label" for="isMandatory">
                                <strong>Mandatory Stage</strong>
                            </label>
                        </div>
                        <div class="form-text mb-3">
                            <i class="bi bi-info-circle me-1"></i>
                            Mandatory stages must be completed before proceeding
                        </div>
                        
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="isParallel" />
                            <label class="form-check-label" for="isParallel">
                                <strong>Allow Parallel Processing</strong>
                            </label>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Allow this stage to run parallel with others
                        </div>
                    </div>
                </div>
                <div class="modal-footer app-modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary btn-save">
                        <i class="bi bi-check-circle me-2"></i>Add Stage
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Condition Modal -->
<div class="modal fade" id="addConditionModal" tabindex="-1" aria-labelledby="addConditionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content app-modal">
            <div class="modal-header app-modal-header">
                <div class="d-flex align-items-center">
                    <div class="modal-icon">
                        <i class="bi bi-funnel"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0" id="addConditionModalLabel">Add Workflow Condition</h5>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addConditionForm" onsubmit="return false;">
                <div class="modal-body app-modal-body">
                    <input type="hidden" id="conditionWorkflowId" value="@Model.Workflow.Id" />
                    
                    <!-- Condition Type -->
                    <div class="mb-4">
                        <label for="conditionType" class="form-label">Condition Type <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-funnel-fill"></i>
                            </span>
                            <select class="form-select" id="conditionType" required onchange="updateConditionFields()">
                                <option value="">Select Condition Type</option>
                                @foreach (var conditionType in Model.ConditionTypeList)
                                {
                                    <option value="@conditionType.Value">@conditionType.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Choose the type of condition to evaluate
                        </div>
                    </div>
                    
                    <!-- Operator -->
                    <div class="mb-4">
                        <label for="operatorType" class="form-label">Operator <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-calculator"></i>
                            </span>
                            <select class="form-select" id="operatorType" required>
                                <option value="">Select Operator</option>
                                @foreach (var operatorItem in Model.OperatorList)
                                {
                                    <option value="@operatorItem.Value">@operatorItem.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Choose the comparison operator
                        </div>
                    </div>
                    
                    <!-- Condition Value -->
                    <div class="mb-4" id="conditionValueDiv">
                        <label for="conditionValue" class="form-label">Condition Value <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-input-cursor-text"></i>
                            </span>
                            <input type="text" class="form-control" id="conditionValue" required />
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            <span id="conditionValueHelp">Enter the value for this condition</span>
                        </div>
                    </div>
                    
                    <!-- Condition Select -->
                    <div class="mb-4" id="conditionSelectDiv" style="display: none;">
                        <label for="conditionSelect" class="form-label">Select Value <span class="text-danger">*</span></label>
                        <div class="input-group input-group-enhanced">
                            <span class="input-group-text">
                                <i class="bi bi-list"></i>
                            </span>
                            <select class="form-select" id="conditionSelect">
                                <option value="">Select...</option>
                            </select>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Choose from available options
                        </div>
                    </div>
                </div>
                <div class="modal-footer app-modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-warning btn-save">
                        <i class="bi bi-check-circle me-2"></i>Add Condition
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Set up URLs for workflow management details
        window.workflowManagementUrls = {
            addStage: '@Url.Action("AddStage", "WorkflowManagement")',
            addCondition: '@Url.Action("AddCondition", "WorkflowManagement")',
            deleteStage: '@Url.Action("DeleteStage", "WorkflowManagement")',
            deleteCondition: '@Url.Action("DeleteCondition", "WorkflowManagement")',
            editWorkflow: '@Url.Action("EditBasic", "WorkflowManagement")',
            deleteWorkflow: '@Url.Action("Delete", "WorkflowManagement")'
        };
        
        // Populate condition select options
        window.conditionOptions = {
            categories: [
                @foreach (var category in Model.CategoryList)
                {
                    <text>{ value: '@category.Value', text: '@category.Text' },</text>
                }
            ],
            divisions: [
                @foreach (var division in Model.DivisionList)
                {
                    <text>{ value: '@division.Value', text: '@division.Text' },</text>
                }
            ],
            departments: [
                @foreach (var department in Model.DepartmentList)
                {
                    <text>{ value: '@department.Value', text: '@department.Text' },</text>
                }
            ],
            events: [
                @foreach (var eventItem in Model.EventList)
                {
                    <text>{ value: '@eventItem.Value', text: '@eventItem.Text' },</text>
                }
            ]
        };
        
        // Override updateConditionFields to use the data
        function updateConditionFields() {
            const conditionType = document.getElementById('conditionType').value;
            const conditionValueDiv = document.getElementById('conditionValueDiv');
            const conditionSelectDiv = document.getElementById('conditionSelectDiv');
            const conditionSelect = document.getElementById('conditionSelect');
            const conditionValueHelp = document.getElementById('conditionValueHelp');
            const operatorSelect = document.getElementById('operatorType');
            
            // Reset
            conditionValueDiv.style.display = 'block';
            conditionSelectDiv.style.display = 'none';
            conditionSelect.innerHTML = '<option value="">Select...</option>';
            
            // Update operator options based on condition type
            updateOperatorOptions(conditionType);
            
            if (conditionType === 'CATEGORY') {
                conditionValueDiv.style.display = 'none';
                conditionSelectDiv.style.display = 'block';
                window.conditionOptions.categories.forEach(item => {
                    conditionSelect.innerHTML += `<option value="${item.value}">${item.text}</option>`;
                });
            } else if (conditionType === 'DIVISION') {
                conditionValueDiv.style.display = 'none';
                conditionSelectDiv.style.display = 'block';
                window.conditionOptions.divisions.forEach(item => {
                    conditionSelect.innerHTML += `<option value="${item.value}">${item.text}</option>`;
                });
            } else if (conditionType === 'DEPARTMENT') {
                conditionValueDiv.style.display = 'none';
                conditionSelectDiv.style.display = 'block';
                window.conditionOptions.departments.forEach(item => {
                    conditionSelect.innerHTML += `<option value="${item.value}">${item.text}</option>`;
                });
            } else if (conditionType === 'EVENT') {
                conditionValueDiv.style.display = 'none';
                conditionSelectDiv.style.display = 'block';
                window.conditionOptions.events.forEach(item => {
                    conditionSelect.innerHTML += `<option value="${item.value}">${item.text}</option>`;
                });
            } else if (conditionType === 'SAVING_COST') {
                conditionValueHelp.textContent = 'Enter amount (e.g., 1000000 for 1 million)';
            }
            
            // Update help text when operator changes
            setTimeout(() => {
                const operatorSelect = document.getElementById('operatorType');
                operatorSelect.addEventListener('change', function() {
                    if (this.value === 'IN' || this.value === 'NOT_IN') {
                        if (conditionType === 'CATEGORY' || conditionType === 'DIVISION' || conditionType === 'DEPARTMENT' || conditionType === 'EVENT') {
                            conditionValueHelp.textContent = 'Select multiple values from dropdown, or enter comma-separated values (e.g., "1,2,3")';
                        }
                    } else {
                        // Reset to default help text
                        if (conditionType === 'SAVING_COST') {
                            conditionValueHelp.textContent = 'Enter amount (e.g., 1000000 for 1 million)';
                        } else {
                            conditionValueHelp.textContent = 'Enter the value for this condition';
                        }
                    }
                });
            }, 100);
        }
        
        // Define all available operators
        const allOperators = [
            @foreach (var operatorItem in Model.OperatorList)
            {
                <text>{ value: '@operatorItem.Value', text: '@operatorItem.Text' },</text>
            }
        ];
        
        // Function to update operator options based on condition type
        function updateOperatorOptions(conditionType) {
            console.log('updateOperatorOptions called with:', conditionType);
            const operatorSelect = document.getElementById('operatorType');
            const currentValue = operatorSelect.value;
            
            // Clear existing options
            operatorSelect.innerHTML = '<option value="">Select Operator</option>';
            
            if (conditionType === 'CATEGORY' || conditionType === 'DIVISION' || conditionType === 'DEPARTMENT' || conditionType === 'EVENT') {
                console.log('Setting list operators for categorical data');
                // For categorical/list data, allow equality and list operators
                operatorSelect.innerHTML += '<option value="=">=</option>';
                operatorSelect.innerHTML += '<option value="!=">!=</option>';
                operatorSelect.innerHTML += '<option value="IN">IN</option>';
                operatorSelect.innerHTML += '<option value="NOT_IN">NOT IN</option>';
            } else if (conditionType === 'SAVING_COST') {
                // For numerical data, allow all numeric operators
                operatorSelect.innerHTML += '<option value=">=">&gt;=</option>';
                operatorSelect.innerHTML += '<option value="<=">&lt;=</option>';
                operatorSelect.innerHTML += '<option value=">">&gt;</option>';
                operatorSelect.innerHTML += '<option value="<">&lt;</option>';
                operatorSelect.innerHTML += '<option value="=">=</option>';
                operatorSelect.innerHTML += '<option value="!=">!=</option>';
            } else {
                // Default: show all operators
                allOperators.forEach(op => {
                    operatorSelect.innerHTML += `<option value="${op.value}">${op.text}</option>`;
                });
            }
            
            // Restore previous selection if still valid
            if (currentValue && operatorSelect.querySelector(`option[value="${currentValue}"]`)) {
                operatorSelect.value = currentValue;
            }
        }
        
        // Reset form when modal opens
        document.addEventListener('DOMContentLoaded', function() {
            const addConditionModal = document.getElementById('addConditionModal');
            if (addConditionModal) {
                addConditionModal.addEventListener('show.bs.modal', function() {
                    // Reset form fields
                    document.getElementById('conditionType').value = '';
                    document.getElementById('operatorType').innerHTML = '<option value="">Select Operator</option>';
                    document.getElementById('conditionValue').value = '';
                    document.getElementById('conditionSelect').value = '';
                    
                    // Reset visibility
                    document.getElementById('conditionValueDiv').style.display = 'block';
                    document.getElementById('conditionSelectDiv').style.display = 'none';
                    
                    // Reset operator options to default
                    const operatorSelect = document.getElementById('operatorType');
                    operatorSelect.innerHTML = '<option value="">Select Operator</option>';
                    allOperators.forEach(op => {
                        operatorSelect.innerHTML += `<option value="${op.value}">${op.text}</option>`;
                    });
                });
            }
        });
        
        // ===== WORKFLOW MANAGEMENT DETAILS JAVASCRIPT =====
        
        $(document).ready(function() {

            // Add Stage Form Submit
            $('#addStageForm').on('submit', function(e) {
                e.preventDefault();
        
                const formData = {
                    workflowId: document.getElementById('workflowId').value,
                    levelId: document.getElementById('levelId').value,
                    stage: parseInt(document.getElementById('stage').value),
                    isMandatory: document.getElementById('isMandatory').checked,
                    isParallel: document.getElementById('isParallel').checked
                };
        
                fetch(window.workflowManagementUrls?.addStage || '/WorkflowManagement/AddStage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: new URLSearchParams(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Workflow stage added successfully.',
                            confirmButtonColor: '#3b82f6'
                        }).then(() => {
                            bootstrap.Modal.getInstance(document.getElementById('addStageModal')).hide();
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message,
                            confirmButtonColor: '#ef4444'
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'An error occurred while adding the stage.',
                        confirmButtonColor: '#ef4444'
                    });
                });
            });

            // Add Condition Form Submit  
            $('#addConditionForm').on('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Get form values
                var workflowId = $('#conditionWorkflowId').val();
                var conditionType = $('#conditionType').val();
                var operator = $('#operatorType').val();
                var conditionValue = $('#conditionValue').is(':visible') ? $('#conditionValue').val() : $('#conditionSelect').val();
                
                // Validation
                if (!operator) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Operator',
                        text: 'Please select an operator!',
                        confirmButtonColor: '#f59e0b'
                    });
                    return;
                }
                
                if (!workflowId || !conditionType || !conditionValue) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Fields',
                        text: 'Please fill in all required fields.',
                        confirmButtonColor: '#f59e0b'
                    });
                    return;
                }
                
                // Send request using jQuery (working version)
                $.post('/WorkflowManagement/AddCondition', {
                    WorkflowId: workflowId,
                    ConditionType: conditionType,
                    Operator: operator,
                    ConditionValue: conditionValue,
                    IsActive: true
                }).done(function(data) {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Workflow condition added successfully.',
                            confirmButtonColor: '#3b82f6'
                        }).then(() => {
                            $('#addConditionModal').modal('hide');
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message,
                            confirmButtonColor: '#ef4444'
                        });
                    }
                }).fail(function(xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Request Failed!',
                        text: 'An error occurred while adding the condition.',
                        confirmButtonColor: '#ef4444'
                    });
                });
            });
            
            // Auto-format workflow name input for edit form
            $('#editWorkflowName').on('input', function() {
                var value = $(this).val().toUpperCase();
                $(this).val(value);
            });
            
            // Handle edit workflow form submission
            $('#editWorkflowForm').on('submit', function(e) {
                e.preventDefault();
                
                // Format workflow name with WF_ prefix
                var workflowNameInput = $('#editWorkflowName').val().trim().toUpperCase();
                
                // Validate workflow name input
                if (!workflowNameInput) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Validation Error!',
                        text: 'Please enter a workflow identifier.',
                        confirmButtonColor: '#dc2626'
                    });
                    return;
                }
                
                // Remove WF_ prefix if user accidentally typed it
                if (workflowNameInput.startsWith('WF_')) {
                    workflowNameInput = workflowNameInput.substring(3);
                }
                
                var fullWorkflowName = 'WF_' + workflowNameInput;
                var workflowId = $('#editWorkflowId').val();
                
                // Send data (only workflow name, description, and active status)
                var formData = {
                    id: parseInt(workflowId),
                    workflowName: fullWorkflowName,
                    desc: $('#editDesc').val(),
                    isActive: $('#editIsActive').is(':checked')
                };
                
                // Show loading state
                var submitBtn = $(this).find('button[type="submit"]');
                var originalText = submitBtn.html();
                submitBtn.html('<i class="bi bi-hourglass-split me-2"></i>Updating...').prop('disabled', true);
                
                $.ajax({
                    url: (window.workflowManagementUrls?.editWorkflow || '/WorkflowManagement/EditBasic') + '/' + workflowId,
                    type: 'POST',
                    data: formData,
                    success: function(response) {
                        if (response.success) {
                            // Close modal
                            var editModal = bootstrap.Modal.getInstance(document.getElementById('editWorkflowModal'));
                            editModal.hide();
                            
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Workflow updated successfully.',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: response.message || 'Failed to update workflow.',
                                confirmButtonColor: '#dc2626'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while updating the workflow.',
                            confirmButtonColor: '#dc2626'
                        });
                    },
                    complete: function() {
                        // Restore button state
                        submitBtn.html(originalText).prop('disabled', false);
                    }
                });
            });
        });

        // Delete Stage functions - outside document.ready since they're called from HTML onclick
        function deleteStage(stageId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to delete this workflow stage. This action cannot be undone!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(window.workflowManagementUrls?.deleteStage || '/WorkflowManagement/DeleteStage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: new URLSearchParams({ stageId: stageId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: 'Workflow stage has been deleted successfully.',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Delete Failed!',
                                text: data.message,
                                confirmButtonColor: '#ef4444'
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while deleting the stage.',
                            confirmButtonColor: '#ef4444'
                        });
                    });
                }
            });
        }

        // Delete Condition
        function deleteCondition(conditionId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to delete this workflow condition. This action cannot be undone!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(window.workflowManagementUrls?.deleteCondition || '/WorkflowManagement/DeleteCondition', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: new URLSearchParams({ conditionId: conditionId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: 'Workflow condition has been deleted successfully.',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Delete Failed!',
                                text: data.message,
                                confirmButtonColor: '#ef4444'
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while deleting the condition.',
                            confirmButtonColor: '#ef4444'
                        });
                    });
                }
            });
        }

        // Open edit workflow modal function
        function openEditWorkflowModal(id, workflowName, desc, isActive) {
            // Set basic data
            document.getElementById('editWorkflowId').value = id;
            
            // Remove WF_ prefix for display
            var displayName = workflowName.startsWith('WF_') ? workflowName.substring(3) : workflowName;
            document.getElementById('editWorkflowName').value = displayName;
            
            document.getElementById('editDesc').value = desc || '';
            document.getElementById('editIsActive').checked = isActive;
            
            // Show modal
            var editModal = new bootstrap.Modal(document.getElementById('editWorkflowModal'));
            editModal.show();
        }

        // Confirm delete workflow function
        function confirmDeleteWorkflow(workflowId, workflowName) {
            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to delete workflow "${workflowName}". This action cannot be undone!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait while we delete the workflow.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Perform AJAX delete action
                    $.ajax({
                        url: (window.workflowManagementUrls?.deleteWorkflow || '/WorkflowManagement/Delete') + '/' + workflowId,
                        type: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        success: function(response) {
                            if (response.success === false) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Cannot Delete Workflow',
                                    text: response.error,
                                    confirmButtonColor: '#dc2626'
                                });
                            } else if (response.success === true) {
                                // Success - workflow deleted, redirect to index
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: `Workflow "${workflowName}" has been deleted successfully.`,
                                    confirmButtonColor: '#3b82f6'
                                }).then(() => {
                                    window.location.href = '/WorkflowManagement';
                                });
                            }
                        },
                        error: function(xhr) {
                            var errorMessage = 'An error occurred while deleting the workflow.';
                            if (xhr.responseJSON && xhr.responseJSON.error) {
                                errorMessage = xhr.responseJSON.error;
                            }
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Cannot Delete Workflow',
                                text: errorMessage,
                                confirmButtonColor: '#dc2626'
                            });
                        }
                    });
                }
            });
        }
    </script>
}

